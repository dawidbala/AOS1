   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_byte
  12               	lcd_byte:
  13               	.LFB12:
  14               		.file 1 "lib/lcd.c"
   1:lib/lcd.c     **** /*
   2:lib/lcd.c     ****  * lcd.c
   3:lib/lcd.c     ****  */
   4:lib/lcd.c     **** 
   5:lib/lcd.c     **** #include "lcd.h"
   6:lib/lcd.c     **** inline void lcd_half( uint8_t data ) {
   7:lib/lcd.c     ****     
   8:lib/lcd.c     ****     if( data & (1<<0)) LCD_PORT |= (1<<LCD_D4);
   9:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D4);
  10:lib/lcd.c     ****     
  11:lib/lcd.c     ****     if( data & (1<<1)) LCD_PORT |= (1<<LCD_D5);
  12:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D5);
  13:lib/lcd.c     ****     
  14:lib/lcd.c     ****     if( data & (1<<2)) LCD_PORT |= (1<<LCD_D6);
  15:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D6);
  16:lib/lcd.c     ****     
  17:lib/lcd.c     ****     if( data & (1<<3)) LCD_PORT |= (1<<LCD_D7);
  18:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D7);
  19:lib/lcd.c     ****     
  20:lib/lcd.c     ****     
  21:lib/lcd.c     **** }
  22:lib/lcd.c     **** 
  23:lib/lcd.c     **** void lcd_byte( uint8_t byte ) {
  15               		.loc 1 23 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  24:lib/lcd.c     ****     
  25:lib/lcd.c     ****     LCD_PORT |= (1<<LCD_E);
  22               		.loc 1 25 0
  23 0000 AC9A      		sbi 0x15,4
  26:lib/lcd.c     ****     lcd_half( byte >> 4 );
  24               		.loc 1 26 0
  25 0002 982F      		mov r25,r24
  26 0004 9295      		swap r25
  27 0006 9F70      		andi r25,lo8(15)
  28               	.LVL1:
  29               	.LBB12:
  30               	.LBB13:
   8:lib/lcd.c     ****     if( data & (1<<0)) LCD_PORT |= (1<<LCD_D4);
  31               		.loc 1 8 0
  32 0008 90FF      		sbrs r25,0
  33 000a 00C0      		rjmp .L2
  34 000c AB9A      		sbi 0x15,3
  35 000e 00C0      		rjmp .L3
  36               	.L2:
   9:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D4);
  37               		.loc 1 9 0
  38 0010 AB98      		cbi 0x15,3
  39               	.L3:
  11:lib/lcd.c     ****     if( data & (1<<1)) LCD_PORT |= (1<<LCD_D5);
  40               		.loc 1 11 0
  41 0012 91FF      		sbrs r25,1
  42 0014 00C0      		rjmp .L4
  43 0016 AA9A      		sbi 0x15,2
  44 0018 00C0      		rjmp .L5
  45               	.L4:
  12:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D5);
  46               		.loc 1 12 0
  47 001a AA98      		cbi 0x15,2
  48               	.L5:
  14:lib/lcd.c     ****     if( data & (1<<2)) LCD_PORT |= (1<<LCD_D6);
  49               		.loc 1 14 0
  50 001c 92FF      		sbrs r25,2
  51 001e 00C0      		rjmp .L6
  52 0020 A99A      		sbi 0x15,1
  53 0022 00C0      		rjmp .L7
  54               	.L6:
  15:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D6);
  55               		.loc 1 15 0
  56 0024 A998      		cbi 0x15,1
  57               	.L7:
  17:lib/lcd.c     ****     if( data & (1<<3)) LCD_PORT |= (1<<LCD_D7);
  58               		.loc 1 17 0
  59 0026 9870      		andi r25,lo8(8)
  60               	.LVL2:
  61 0028 01F0      		breq .L8
  62 002a A89A      		sbi 0x15,0
  63 002c 00C0      		rjmp .L9
  64               	.L8:
  18:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D7);
  65               		.loc 1 18 0
  66 002e A898      		cbi 0x15,0
  67               	.L9:
  68               	.LBE13:
  69               	.LBE12:
  27:lib/lcd.c     ****     LCD_PORT &= ~(1<<LCD_E);
  70               		.loc 1 27 0
  71 0030 AC98      		cbi 0x15,4
  28:lib/lcd.c     ****     
  29:lib/lcd.c     ****     
  30:lib/lcd.c     ****     LCD_PORT |= (1<<LCD_E);
  72               		.loc 1 30 0
  73 0032 AC9A      		sbi 0x15,4
  74               	.LVL3:
  75               	.LBB14:
  76               	.LBB15:
   8:lib/lcd.c     ****     if( data & (1<<0)) LCD_PORT |= (1<<LCD_D4);
  77               		.loc 1 8 0
  78 0034 80FF      		sbrs r24,0
  79 0036 00C0      		rjmp .L10
  80 0038 AB9A      		sbi 0x15,3
  81 003a 00C0      		rjmp .L11
  82               	.L10:
   9:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D4);
  83               		.loc 1 9 0
  84 003c AB98      		cbi 0x15,3
  85               	.L11:
  11:lib/lcd.c     ****     if( data & (1<<1)) LCD_PORT |= (1<<LCD_D5);
  86               		.loc 1 11 0
  87 003e 81FF      		sbrs r24,1
  88 0040 00C0      		rjmp .L12
  89 0042 AA9A      		sbi 0x15,2
  90 0044 00C0      		rjmp .L13
  91               	.L12:
  12:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D5);
  92               		.loc 1 12 0
  93 0046 AA98      		cbi 0x15,2
  94               	.L13:
  14:lib/lcd.c     ****     if( data & (1<<2)) LCD_PORT |= (1<<LCD_D6);
  95               		.loc 1 14 0
  96 0048 82FF      		sbrs r24,2
  97 004a 00C0      		rjmp .L14
  98 004c A99A      		sbi 0x15,1
  99 004e 00C0      		rjmp .L15
 100               	.L14:
  15:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D6);
 101               		.loc 1 15 0
 102 0050 A998      		cbi 0x15,1
 103               	.L15:
  17:lib/lcd.c     ****     if( data & (1<<3)) LCD_PORT |= (1<<LCD_D7);
 104               		.loc 1 17 0
 105 0052 83FF      		sbrs r24,3
 106 0054 00C0      		rjmp .L16
 107 0056 A89A      		sbi 0x15,0
 108 0058 00C0      		rjmp .L17
 109               	.L16:
  18:lib/lcd.c     ****     else LCD_PORT &= ~(1<<LCD_D7);
 110               		.loc 1 18 0
 111 005a A898      		cbi 0x15,0
 112               	.L17:
 113               	.LBE15:
 114               	.LBE14:
  31:lib/lcd.c     ****     lcd_half( byte );
  32:lib/lcd.c     ****     LCD_PORT &= ~(1<<LCD_E);
 115               		.loc 1 32 0
 116 005c AC98      		cbi 0x15,4
 117               	.LVL4:
 118               	.LBB16:
 119               	.LBB17:
 120               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 165:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #else
 166:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint16_t __ticks;
 167:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 169:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = 1;
 170:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 171:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	{
 172:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		while(__ticks)
 175:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		{
 176:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			// wait 1/10 ms
 177:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 			__ticks --;
 179:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		}
 180:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		return;
 181:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	}
 182:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	else
 183:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 184:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 185:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 186:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** }
 187:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 188:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 189:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 190:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 191:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 193:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 194:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 196:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 198:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    will not be informed about this case.
 201:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 202:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 205:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0us.
 206:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   
 207:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 210:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 211:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 213:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  
 214:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 218:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 221:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 222:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 223:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 224:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_us(double __us)
 225:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 226:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 227:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 230:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 231:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 234:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 237:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 240:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 241:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 242:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 244:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 245:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 121               		.loc 2 245 0
 122 005e 8FED      		ldi r24,lo8(479)
 123 0060 91E0      		ldi r25,hi8(479)
 124 0062 0197      		1: sbiw r24,1
 125 0064 01F4      		brne 1b
 126               	.LVL5:
 127 0066 00C0      		rjmp .
 128 0068 0000      		nop
 129 006a 0895      		ret
 130               	.LBE17:
 131               	.LBE16:
 132               		.cfi_endproc
 133               	.LFE12:
 135               	.global	lcd_cmd
 137               	lcd_cmd:
 138               	.LFB13:
  33:lib/lcd.c     ****     
  34:lib/lcd.c     ****     _delay_us(120);
  35:lib/lcd.c     **** }
  36:lib/lcd.c     **** 
  37:lib/lcd.c     **** void lcd_cmd( uint8_t cmd ) {
 139               		.loc 1 37 0
 140               		.cfi_startproc
 141               	.LVL6:
 142               	/* prologue: function */
 143               	/* frame size = 0 */
 144               	/* stack size = 0 */
 145               	.L__stack_usage = 0
  38:lib/lcd.c     ****     
  39:lib/lcd.c     ****     LCD_PORT &= ~(1<<LCD_RS);
 146               		.loc 1 39 0
 147 006c AD98      		cbi 0x15,5
  40:lib/lcd.c     ****     lcd_byte( cmd );
 148               		.loc 1 40 0
 149 006e 0C94 0000 		jmp lcd_byte
 150               	.LVL7:
 151               		.cfi_endproc
 152               	.LFE13:
 154               	.global	lcd_data
 156               	lcd_data:
 157               	.LFB14:
  41:lib/lcd.c     **** }
  42:lib/lcd.c     **** 
  43:lib/lcd.c     **** void lcd_data( uint8_t data ) {
 158               		.loc 1 43 0
 159               		.cfi_startproc
 160               	.LVL8:
 161               	/* prologue: function */
 162               	/* frame size = 0 */
 163               	/* stack size = 0 */
 164               	.L__stack_usage = 0
  44:lib/lcd.c     ****     
  45:lib/lcd.c     ****     LCD_PORT |= (1<<LCD_RS);
 165               		.loc 1 45 0
 166 0072 AD9A      		sbi 0x15,5
  46:lib/lcd.c     ****     lcd_byte( data );
 167               		.loc 1 46 0
 168 0074 0C94 0000 		jmp lcd_byte
 169               	.LVL9:
 170               		.cfi_endproc
 171               	.LFE14:
 173               	.global	lcd_string
 175               	lcd_string:
 176               	.LFB15:
  47:lib/lcd.c     **** }
  48:lib/lcd.c     **** 
  49:lib/lcd.c     **** void lcd_string( char * string ) {
 177               		.loc 1 49 0
 178               		.cfi_startproc
 179               	.LVL10:
 180 0078 CF93      		push r28
 181               	.LCFI0:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 28, -2
 184 007a DF93      		push r29
 185               	.LCFI1:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 29, -3
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 2 */
 191               	.L__stack_usage = 2
 192 007c EC01      		movw r28,r24
 193               	.LVL11:
 194               	.L22:
  50:lib/lcd.c     ****     
  51:lib/lcd.c     ****     while( *string ) lcd_data( *string++ );
 195               		.loc 1 51 0 discriminator 1
 196 007e 8991      		ld r24,Y+
 197               	.LVL12:
 198 0080 8823      		tst r24
 199 0082 01F0      		breq .L24
 200               	.LVL13:
 201               		.loc 1 51 0 is_stmt 0 discriminator 2
 202 0084 0E94 0000 		call lcd_data
 203               	.LVL14:
 204 0088 00C0      		rjmp .L22
 205               	.LVL15:
 206               	.L24:
 207               	/* epilogue start */
  52:lib/lcd.c     **** }
 208               		.loc 1 52 0 is_stmt 1
 209 008a DF91      		pop r29
 210 008c CF91      		pop r28
 211               	.LVL16:
 212 008e 0895      		ret
 213               		.cfi_endproc
 214               	.LFE15:
 216               	.global	lcd_cls
 218               	lcd_cls:
 219               	.LFB16:
  53:lib/lcd.c     **** 
  54:lib/lcd.c     **** void lcd_cls() {
 220               		.loc 1 54 0
 221               		.cfi_startproc
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
  55:lib/lcd.c     ****     lcd_cmd( 0x01 );
 226               		.loc 1 55 0
 227 0090 81E0      		ldi r24,lo8(1)
 228 0092 0C94 0000 		jmp lcd_cmd
 229               	.LVL17:
 230               		.cfi_endproc
 231               	.LFE16:
 233               	.global	lcd_locate
 235               	lcd_locate:
 236               	.LFB17:
  56:lib/lcd.c     **** }
  57:lib/lcd.c     **** 
  58:lib/lcd.c     **** void lcd_locate( uint8_t y, uint8_t x ) {
 237               		.loc 1 58 0
 238               		.cfi_startproc
 239               	.LVL18:
 240               	/* prologue: function */
 241               	/* frame size = 0 */
 242               	/* stack size = 0 */
 243               	.L__stack_usage = 0
 244 0096 0895      		ret
 245               		.cfi_endproc
 246               	.LFE17:
 248               	.global	lcd_init
 250               	lcd_init:
 251               	.LFB18:
  59:lib/lcd.c     ****     
  60:lib/lcd.c     ****     switch( y ) {
  61:lib/lcd.c     ****             
  62:lib/lcd.c     ****         case 0: y = 0x00; break;
  63:lib/lcd.c     ****         case 1: y = 0x40; break;
  64:lib/lcd.c     ****             
  65:lib/lcd.c     ****             
  66:lib/lcd.c     ****             
  67:lib/lcd.c     ****             lcd_cmd( (0x80+y+x) );
  68:lib/lcd.c     ****             
  69:lib/lcd.c     ****     }
  70:lib/lcd.c     **** }
  71:lib/lcd.c     **** 
  72:lib/lcd.c     **** void lcd_init() {
 252               		.loc 1 72 0
 253               		.cfi_startproc
 254               	/* prologue: function */
 255               	/* frame size = 0 */
 256               	/* stack size = 0 */
 257               	.L__stack_usage = 0
  73:lib/lcd.c     ****     
  74:lib/lcd.c     ****     LCD_DDR |= ( (1<<LCD_RS) | (1<<LCD_E) | (1<<LCD_D4) | (1<<LCD_D5) | (1<<LCD_D6) | (1<<LCD_D7));
 258               		.loc 1 74 0
 259 0098 84B3      		in r24,0x14
 260 009a 8F63      		ori r24,lo8(63)
 261 009c 84BB      		out 0x14,r24
  75:lib/lcd.c     ****     
  76:lib/lcd.c     ****     lcd_cmd( 0x06 );
 262               		.loc 1 76 0
 263 009e 86E0      		ldi r24,lo8(6)
 264 00a0 0E94 0000 		call lcd_cmd
 265               	.LVL19:
  77:lib/lcd.c     ****     lcd_cmd( 0x0C );
 266               		.loc 1 77 0
 267 00a4 8CE0      		ldi r24,lo8(12)
 268 00a6 0E94 0000 		call lcd_cmd
 269               	.LVL20:
  78:lib/lcd.c     ****     lcd_cmd( 0x17 );
 270               		.loc 1 78 0
 271 00aa 87E1      		ldi r24,lo8(23)
 272 00ac 0E94 0000 		call lcd_cmd
 273               	.LVL21:
  79:lib/lcd.c     ****     lcd_cmd( 0x28 );
 274               		.loc 1 79 0
 275 00b0 88E2      		ldi r24,lo8(40)
 276 00b2 0E94 0000 		call lcd_cmd
 277               	.LVL22:
  80:lib/lcd.c     ****     
  81:lib/lcd.c     ****     lcd_cls();
 278               		.loc 1 81 0
 279 00b6 0E94 0000 		call lcd_cls
 280               	.LVL23:
 281               	.LBB18:
 282               	.LBB19:
 283               		.loc 2 245 0
 284 00ba 8FE1      		ldi r24,lo8(799)
 285 00bc 93E0      		ldi r25,hi8(799)
 286 00be 0197      		1: sbiw r24,1
 287 00c0 01F4      		brne 1b
 288 00c2 00C0      		rjmp .
 289 00c4 0000      		nop
 290 00c6 0895      		ret
 291               	.LBE19:
 292               	.LBE18:
 293               		.cfi_endproc
 294               	.LFE18:
 296               		.section	.rodata.str1.1,"aMS",@progbits,1
 297               	.LC0:
 298 0000 414F 5320 		.string	"AOS 1 0.1.1"
 298      3120 302E 
 298      312E 3100 
 299               		.section	.text.startup,"ax",@progbits
 300               	.global	main
 302               	main:
 303               	.LFB19:
 304               		.file 3 "main.c"
   1:main.c        **** //
   2:main.c        **** //  main.c
   3:main.c        **** //  AOS1
   4:main.c        **** //
   5:main.c        **** //  Created by David on 02.12.2015.
   6:main.c        **** //
   7:main.c        **** 
   8:main.c        **** 
   9:main.c        **** #include "lib/avr_compiler.h"
  10:main.c        **** #include <avr/io.h>
  11:main.c        **** #include <util/delay.h>
  12:main.c        **** #include "lib/lcd.c"
  13:main.c        **** 
  14:main.c        **** 
  15:main.c        **** //#define ledPin_bm   (1 << 0)
  16:main.c        **** //#define ledPort     PORTC
  17:main.c        **** //#define ledDDR      DDRC
  18:main.c        **** 
  19:main.c        **** 
  20:main.c        **** int main(void){
 305               		.loc 3 20 0
 306               		.cfi_startproc
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
  21:main.c        ****     DDRC|=(1<<PC7);
 311               		.loc 3 21 0
 312 0000 A79A      		sbi 0x14,7
  22:main.c        **** 
  23:main.c        ****     
  24:main.c        ****     lcd_init();
 313               		.loc 3 24 0
 314 0002 0E94 0000 		call lcd_init
 315               	.LVL24:
 316               	.L29:
  25:main.c        ****     
  26:main.c        ****     while(1) {
  27:main.c        ****         
  28:main.c        ****         lcd_string("AOS 1 0.1.1");
 317               		.loc 3 28 0 discriminator 1
 318 0006 80E0      		ldi r24,lo8(.LC0)
 319 0008 90E0      		ldi r25,hi8(.LC0)
 320 000a 0E94 0000 		call lcd_string
 321               	.LVL25:
  29:main.c        ****         PORTC ^= (1<<PC7);
 322               		.loc 3 29 0 discriminator 1
 323 000e 85B3      		in r24,0x15
 324 0010 8058      		subi r24,lo8(-(-128))
 325 0012 85BB      		out 0x15,r24
 326               	.LVL26:
 327               	.LBB20:
 328               	.LBB21:
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 329               		.loc 2 163 0 discriminator 1
 330 0014 2FEF      		ldi r18,lo8(1599999)
 331 0016 89E6      		ldi r24,hi8(1599999)
 332 0018 98E1      		ldi r25,hlo8(1599999)
 333 001a 2150      		1: subi r18,1
 334 001c 8040      		sbci r24,0
 335 001e 9040      		sbci r25,0
 336 0020 01F4      		brne 1b
 337 0022 00C0      		rjmp .
 338 0024 0000      		nop
 339 0026 00C0      		rjmp .L29
 340               	.LBE21:
 341               	.LBE20:
 342               		.cfi_endproc
 343               	.LFE19:
 345               		.text
 346               	.Letext0:
 347               		.file 4 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:2      *ABS*:0000003e __SP_H__
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:3      *ABS*:0000003d __SP_L__
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:4      *ABS*:0000003f __SREG__
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:6      *ABS*:00000001 __zero_reg__
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:12     .text:00000000 lcd_byte
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:137    .text:0000006c lcd_cmd
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:156    .text:00000072 lcd_data
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:175    .text:00000078 lcd_string
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:218    .text:00000090 lcd_cls
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:235    .text:00000096 lcd_locate
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:250    .text:00000098 lcd_init
/var/folders/81/7plh_tys5lqfyddsvzkdfmtr0000gp/T//ccmoCmwX.s:302    .text.startup:00000000 main

UNDEFINED SYMBOLS
__do_copy_data
