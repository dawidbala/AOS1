
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  000001d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ff  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b7  00000000  00000000  0000061f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000175  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018c  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015b  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_byte>:
    
}

void lcd_byte( uint8_t byte ) {
    
    LCD_PORT |= (1<<LCD_E);
  6c:	ac 9a       	sbi	0x15, 4	; 21
    lcd_half( byte >> 4 );
  6e:	98 2f       	mov	r25, r24
  70:	92 95       	swap	r25
  72:	9f 70       	andi	r25, 0x0F	; 15
 */

#include "lcd.h"
inline void lcd_half( uint8_t data ) {
    
    if( data & (1<<0)) LCD_PORT |= (1<<LCD_D4);
  74:	90 ff       	sbrs	r25, 0
  76:	02 c0       	rjmp	.+4      	; 0x7c <lcd_byte+0x10>
  78:	ab 9a       	sbi	0x15, 3	; 21
  7a:	01 c0       	rjmp	.+2      	; 0x7e <lcd_byte+0x12>
    else LCD_PORT &= ~(1<<LCD_D4);
  7c:	ab 98       	cbi	0x15, 3	; 21
    
    if( data & (1<<1)) LCD_PORT |= (1<<LCD_D5);
  7e:	91 ff       	sbrs	r25, 1
  80:	02 c0       	rjmp	.+4      	; 0x86 <lcd_byte+0x1a>
  82:	aa 9a       	sbi	0x15, 2	; 21
  84:	01 c0       	rjmp	.+2      	; 0x88 <lcd_byte+0x1c>
    else LCD_PORT &= ~(1<<LCD_D5);
  86:	aa 98       	cbi	0x15, 2	; 21
    
    if( data & (1<<2)) LCD_PORT |= (1<<LCD_D6);
  88:	92 ff       	sbrs	r25, 2
  8a:	02 c0       	rjmp	.+4      	; 0x90 <lcd_byte+0x24>
  8c:	a9 9a       	sbi	0x15, 1	; 21
  8e:	01 c0       	rjmp	.+2      	; 0x92 <lcd_byte+0x26>
    else LCD_PORT &= ~(1<<LCD_D6);
  90:	a9 98       	cbi	0x15, 1	; 21
    
    if( data & (1<<3)) LCD_PORT |= (1<<LCD_D7);
  92:	98 70       	andi	r25, 0x08	; 8
  94:	11 f0       	breq	.+4      	; 0x9a <lcd_byte+0x2e>
  96:	a8 9a       	sbi	0x15, 0	; 21
  98:	01 c0       	rjmp	.+2      	; 0x9c <lcd_byte+0x30>
    else LCD_PORT &= ~(1<<LCD_D7);
  9a:	a8 98       	cbi	0x15, 0	; 21

void lcd_byte( uint8_t byte ) {
    
    LCD_PORT |= (1<<LCD_E);
    lcd_half( byte >> 4 );
    LCD_PORT &= ~(1<<LCD_E);
  9c:	ac 98       	cbi	0x15, 4	; 21
    
    
    LCD_PORT |= (1<<LCD_E);
  9e:	ac 9a       	sbi	0x15, 4	; 21
 */

#include "lcd.h"
inline void lcd_half( uint8_t data ) {
    
    if( data & (1<<0)) LCD_PORT |= (1<<LCD_D4);
  a0:	80 ff       	sbrs	r24, 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <lcd_byte+0x3c>
  a4:	ab 9a       	sbi	0x15, 3	; 21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <lcd_byte+0x3e>
    else LCD_PORT &= ~(1<<LCD_D4);
  a8:	ab 98       	cbi	0x15, 3	; 21
    
    if( data & (1<<1)) LCD_PORT |= (1<<LCD_D5);
  aa:	81 ff       	sbrs	r24, 1
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <lcd_byte+0x46>
  ae:	aa 9a       	sbi	0x15, 2	; 21
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <lcd_byte+0x48>
    else LCD_PORT &= ~(1<<LCD_D5);
  b2:	aa 98       	cbi	0x15, 2	; 21
    
    if( data & (1<<2)) LCD_PORT |= (1<<LCD_D6);
  b4:	82 ff       	sbrs	r24, 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <lcd_byte+0x50>
  b8:	a9 9a       	sbi	0x15, 1	; 21
  ba:	01 c0       	rjmp	.+2      	; 0xbe <lcd_byte+0x52>
    else LCD_PORT &= ~(1<<LCD_D6);
  bc:	a9 98       	cbi	0x15, 1	; 21
    
    if( data & (1<<3)) LCD_PORT |= (1<<LCD_D7);
  be:	83 ff       	sbrs	r24, 3
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_byte+0x5a>
  c2:	a8 9a       	sbi	0x15, 0	; 21
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_byte+0x5c>
    else LCD_PORT &= ~(1<<LCD_D7);
  c6:	a8 98       	cbi	0x15, 0	; 21
    LCD_PORT &= ~(1<<LCD_E);
    
    
    LCD_PORT |= (1<<LCD_E);
    lcd_half( byte );
    LCD_PORT &= ~(1<<LCD_E);
  c8:	ac 98       	cbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ed       	ldi	r24, 0xDF	; 223
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <lcd_byte+0x62>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <lcd_byte+0x68>
  d4:	00 00       	nop
  d6:	08 95       	ret

000000d8 <lcd_cmd>:
    _delay_us(120);
}

void lcd_cmd( uint8_t cmd ) {
    
    LCD_PORT &= ~(1<<LCD_RS);
  d8:	ad 98       	cbi	0x15, 5	; 21
    lcd_byte( cmd );
  da:	0c 94 36 00 	jmp	0x6c	; 0x6c <lcd_byte>

000000de <lcd_data>:
}

void lcd_data( uint8_t data ) {
    
    LCD_PORT |= (1<<LCD_RS);
  de:	ad 9a       	sbi	0x15, 5	; 21
    lcd_byte( data );
  e0:	0c 94 36 00 	jmp	0x6c	; 0x6c <lcd_byte>

000000e4 <lcd_string>:
}

void lcd_string( char * string ) {
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
    
    while( *string ) lcd_data( *string++ );
  ea:	89 91       	ld	r24, Y+
  ec:	88 23       	and	r24, r24
  ee:	19 f0       	breq	.+6      	; 0xf6 <lcd_string+0x12>
  f0:	0e 94 6f 00 	call	0xde	; 0xde <lcd_data>
  f4:	fa cf       	rjmp	.-12     	; 0xea <lcd_string+0x6>
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_cls>:

void lcd_cls() {
    lcd_cmd( 0x01 );
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <lcd_cmd>

00000102 <lcd_locate>:
}

void lcd_locate( uint8_t y, uint8_t x ) {
 102:	08 95       	ret

00000104 <lcd_init>:
    }
}

void lcd_init() {
    
    LCD_DDR |= ( (1<<LCD_RS) | (1<<LCD_E) | (1<<LCD_D4) | (1<<LCD_D5) | (1<<LCD_D6) | (1<<LCD_D7));
 104:	84 b3       	in	r24, 0x14	; 20
 106:	8f 63       	ori	r24, 0x3F	; 63
 108:	84 bb       	out	0x14, r24	; 20
    
    lcd_cmd( 0x06 );
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
    lcd_cmd( 0x0C );
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
    lcd_cmd( 0x17 );
 116:	87 e1       	ldi	r24, 0x17	; 23
 118:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
    lcd_cmd( 0x28 );
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_cmd>
    
    lcd_cls();
 122:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_cls>
 126:	8f e1       	ldi	r24, 0x1F	; 31
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_init+0x26>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_init+0x2c>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <main>:
//#define ledPort     PORTC
//#define ledDDR      DDRC


int main(void){
    DDRD = 0;
 134:	11 ba       	out	0x11, r1	; 17
    PORTD = 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	82 bb       	out	0x12, r24	; 18
    DDRC|=(1<<7);
 13a:	a7 9a       	sbi	0x14, 7	; 20

  while(1) {
      
      
      if (PIND != 0xFF)
 13c:	80 b3       	in	r24, 0x10	; 16
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	11 f0       	breq	.+4      	; 0x146 <main+0x12>
          
      {
         PORTC ^= (0<<LED);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	02 c0       	rjmp	.+4      	; 0x14a <main+0x16>
      }
      else
      {
        PORTC ^= (1<<LED);
 146:	85 b3       	in	r24, 0x15	; 21
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	85 bb       	out	0x15, r24	; 21
 14c:	f7 cf       	rjmp	.-18     	; 0x13c <main+0x8>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
