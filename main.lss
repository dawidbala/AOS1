
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000002c0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000068  00000000  00000000  00000370  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a0e  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000020e  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002af  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000212  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000028a  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  7a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  82:	80 ff       	sbrs	r24, 0
  84:	02 c0       	rjmp	.+4      	; 0x8a <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  86:	ab 9a       	sbi	0x15, 3	; 21
  88:	01 c0       	rjmp	.+2      	; 0x8c <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  8a:	ab 98       	cbi	0x15, 3	; 21

if(nibbleToWrite & 0x02)
  8c:	81 ff       	sbrs	r24, 1
  8e:	02 c0       	rjmp	.+4      	; 0x94 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  90:	aa 9a       	sbi	0x15, 2	; 21
  92:	01 c0       	rjmp	.+2      	; 0x96 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  94:	aa 98       	cbi	0x15, 2	; 21

if(nibbleToWrite & 0x04)
  96:	82 ff       	sbrs	r24, 2
  98:	02 c0       	rjmp	.+4      	; 0x9e <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  9a:	a9 9a       	sbi	0x15, 1	; 21
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  9e:	a9 98       	cbi	0x15, 1	; 21

if(nibbleToWrite & 0x08)
  a0:	83 ff       	sbrs	r24, 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  a4:	a8 9a       	sbi	0x15, 0	; 21
  a6:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  a8:	a8 98       	cbi	0x15, 0	; 21
  aa:	08 95       	ret

000000ac <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  b0:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(dataToWrite >> 4);
  b2:	82 95       	swap	r24
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	0e 94 41 00 	call	0x82	; 0x82 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  ba:	ac 98       	cbi	0x15, 4	; 21
LCD_E_PORT |= LCD_E;
  bc:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(dataToWrite);
  be:	8c 2f       	mov	r24, r28
  c0:	0e 94 41 00 	call	0x82	; 0x82 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  c4:	ac 98       	cbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	87 ec       	ldi	r24, 0xC7	; 199
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_LCD_Write+0x1e>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_LCD_Write+0x24>
  d0:	00 00       	nop
_delay_us(50);
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  d6:	ad 98       	cbi	0x15, 5	; 21
_LCD_Write(commandToWrite);
  d8:	0c 94 56 00 	jmp	0xac	; 0xac <_LCD_Write>

000000dc <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  dc:	ad 9a       	sbi	0x15, 5	; 21
_LCD_Write(dataToWrite);
  de:	0c 94 56 00 	jmp	0xac	; 0xac <_LCD_Write>

000000e2 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
while(*text)
  e8:	89 91       	ld	r24, Y+
  ea:	88 23       	and	r24, r24
  ec:	19 f0       	breq	.+6      	; 0xf4 <LCD_WriteText+0x12>
  LCD_WriteData(*text++);
  ee:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_WriteData>
  f2:	fa cf       	rjmp	.-12     	; 0xe8 <LCD_WriteText+0x6>
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
  fa:	90 e4       	ldi	r25, 0x40	; 64
  fc:	69 9f       	mul	r22, r25
  fe:	80 0d       	add	r24, r0
 100:	11 24       	eor	r1, r1
 102:	80 68       	ori	r24, 0x80	; 128
 104:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <LCD_WriteCommand>

00000108 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Clear+0xa>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Clear+0x10>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9f e1       	ldi	r25, 0x1F	; 31
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Home+0xa>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Home+0x10>
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 130:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 132:	a3 9a       	sbi	0x14, 3	; 20
LCD_DB5_DIR |= LCD_DB5; //
 134:	a2 9a       	sbi	0x14, 2	; 20
LCD_DB6_DIR |= LCD_DB6; //
 136:	a1 9a       	sbi	0x14, 1	; 20
LCD_DB7_DIR |= LCD_DB7; //
 138:	a0 9a       	sbi	0x14, 0	; 20
LCD_E_DIR 	|= LCD_E;   //
 13a:	a4 9a       	sbi	0x14, 4	; 20
LCD_RS_DIR 	|= LCD_RS;  //
 13c:	a5 9a       	sbi	0x14, 5	; 20
 13e:	8f e5       	ldi	r24, 0x5F	; 95
 140:	9a ee       	ldi	r25, 0xEA	; 234
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Initalize+0x12>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Initalize+0x18>
 148:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 14a:	ad 98       	cbi	0x15, 5	; 21
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 14c:	ac 98       	cbi	0x15, 4	; 21
 14e:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 150:	ac 9a       	sbi	0x15, 4	; 21
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	0e 94 41 00 	call	0x82	; 0x82 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 158:	ac 98       	cbi	0x15, 4	; 21
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	9e e4       	ldi	r25, 0x4E	; 78
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Initalize+0x2e>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Initalize+0x34>
 164:	00 00       	nop
 166:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 168:	99 f7       	brne	.-26     	; 0x150 <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 16a:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(0x02); // tryb 4-bitowy
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 41 00 	call	0x82	; 0x82 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 172:	ac 98       	cbi	0x15, 4	; 21
 174:	8f e9       	ldi	r24, 0x9F	; 159
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Initalize+0x48>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Initalize+0x4e>
 17e:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9f e1       	ldi	r25, 0x1F	; 31
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Initalize+0x66>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Initalize+0x6c>
 19c:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
}
 1a6:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <LCD_WriteCommand>

000001ac <ADC_init>:
 *  Author: Piotr
 */ 
#include "ADC.h"

void ADC_init(void){
	ADMUX |= (1<<REFS0);//ustawiam napiêcie odniesienia na AVCC (napiêcie zasilania uk³adu ~5V)
 1ac:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//ustawienie prescalera na 128 = czêstotliwoœæ taktowania 125kHz
 1ae:	86 b1       	in	r24, 0x06	; 6
 1b0:	87 60       	ori	r24, 0x07	; 7
 1b2:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);//w³¹czenie przetwornika
 1b4:	37 9a       	sbi	0x06, 7	; 6
 1b6:	08 95       	ret

000001b8 <ADC_get>:
	
}
uint16_t ADC_get(uint8_t channel){
	ADMUX=(ADMUX&0b11100000)|(channel&0b00011111);//ustawiam kana³
 1b8:	97 b1       	in	r25, 0x07	; 7
 1ba:	8f 71       	andi	r24, 0x1F	; 31
 1bc:	90 7e       	andi	r25, 0xE0	; 224
 1be:	89 2b       	or	r24, r25
 1c0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);//rozpoczynam konwersjê
 1c2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));//czekamy na zakoñczenie tej konwersji
 1c4:	36 99       	sbic	0x06, 6	; 6
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <ADC_get+0xc>
	return ADC;
 1c8:	84 b1       	in	r24, 0x04	; 4
 1ca:	95 b1       	in	r25, 0x05	; 5
}
 1cc:	08 95       	ret

000001ce <main>:

// GÅ‚Ã³wna funkcja
int main(void)
{
// Konfiguracja portÃ³w
    Btn_DIR = 0x00;
 1ce:	11 ba       	out	0x11, r1	; 17
    Btn_PORT = 0xff;
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	82 bb       	out	0x12, r24	; 18
    wLED_DIR     |= (1<<wLED);
 1d4:	a7 9a       	sbi	0x14, 7	; 20
    wLED_PORT    |= (1<<wLED);
 1d6:	af 9a       	sbi	0x15, 7	; 21
    
    
// Inicjalizacje modÃ³Å‚Ã³w
    LCD_Initalize(); // Inicjalizacja LCD
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <LCD_Initalize>
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
    
    
// Ekran startowy
    LCD_GoTo(0,0); // Kursor w pierwszyej kolumnie pierwszego wiersza.
    LCD_WriteText("AOS 1");
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteText>
 1ea:	80 ec       	ldi	r24, 0xC0	; 192
 1ec:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
    
    LCD_GoTo(0,1); // Kursor w pierwszej kolumnie drugiego wiersza.
    LCD_WriteText("version: 0.1");
 1f0:	86 e6       	ldi	r24, 0x66	; 102
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteText>
    
//GÅ‚Ã³wna pÄ™tla
    while(1)
    {
// MENU
      if (PIND == Btn_LeftMinus)  // L+
 1f8:	80 b3       	in	r24, 0x10	; 16
 1fa:	8f 37       	cpi	r24, 0x7F	; 127
 1fc:	49 f4       	brne	.+18     	; 0x210 <main+0x42>
        {
            PORTC &= (~(1<<7));
 1fe:	af 98       	cbi	0x15, 7	; 21
            LCD_Clear();
 200:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("L+");
 20a:	83 e7       	ldi	r24, 0x73	; 115
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	4d c0       	rjmp	.+154    	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_LeftPlus) // L-
 210:	80 b3       	in	r24, 0x10	; 16
 212:	8f 3b       	cpi	r24, 0xBF	; 191
 214:	49 f4       	brne	.+18     	; 0x228 <main+0x5a>
        {
            PORTC |= (1<<7);
 216:	af 9a       	sbi	0x15, 7	; 21
            LCD_Clear();
 218:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("L-");
 222:	86 e7       	ldi	r24, 0x76	; 118
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	41 c0       	rjmp	.+130    	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_PS) // P/S
 228:	80 b3       	in	r24, 0x10	; 16
 22a:	8f 3d       	cpi	r24, 0xDF	; 223
 22c:	41 f4       	brne	.+16     	; 0x23e <main+0x70>
        {
            LCD_Clear();
 22e:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("P/S");
 238:	89 e7       	ldi	r24, 0x79	; 121
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	36 c0       	rjmp	.+108    	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_S) // S
 23e:	80 b3       	in	r24, 0x10	; 16
 240:	8f 3e       	cpi	r24, 0xEF	; 239
 242:	41 f4       	brne	.+16     	; 0x254 <main+0x86>
        {
          LCD_Clear();
 244:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 248:	80 e8       	ldi	r24, 0x80	; 128
 24a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
          LCD_GoTo(0,0);
          LCD_WriteText("S");
 24e:	8b e7       	ldi	r24, 0x7B	; 123
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	2b c0       	rjmp	.+86     	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_M) // M
 254:	80 b3       	in	r24, 0x10	; 16
 256:	87 3f       	cpi	r24, 0xF7	; 247
 258:	41 f4       	brne	.+16     	; 0x26a <main+0x9c>
        {
            LCD_Clear();
 25a:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("M");
 264:	8d e7       	ldi	r24, 0x7D	; 125
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	20 c0       	rjmp	.+64     	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_Remote) // R
 26a:	80 b3       	in	r24, 0x10	; 16
 26c:	8b 3f       	cpi	r24, 0xFB	; 251
 26e:	41 f4       	brne	.+16     	; 0x280 <main+0xb2>
        {
            LCD_Clear();
 270:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R");
 27a:	8f e7       	ldi	r24, 0x7F	; 127
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	15 c0       	rjmp	.+42     	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_RightMinus) // R-
 280:	80 b3       	in	r24, 0x10	; 16
 282:	8d 3f       	cpi	r24, 0xFD	; 253
 284:	41 f4       	brne	.+16     	; 0x296 <main+0xc8>
        {
            LCD_Clear();
 286:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R-");
 290:	81 e8       	ldi	r24, 0x81	; 129
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0a c0       	rjmp	.+20     	; 0x2aa <main+0xdc>
        }
      else if (PIND == Btn_RightPlus) // R+
 296:	80 b3       	in	r24, 0x10	; 16
 298:	8e 3f       	cpi	r24, 0xFE	; 254
 29a:	49 f4       	brne	.+18     	; 0x2ae <main+0xe0>
        {
            LCD_Clear();
 29c:	0e 94 84 00 	call	0x108	; 0x108 <LCD_Clear>
 2a0:	80 e8       	ldi	r24, 0x80	; 128
 2a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R+");
 2a6:	84 e8       	ldi	r24, 0x84	; 132
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteText>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0xe4>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xea>
 2b8:	00 00       	nop
 2ba:	9e cf       	rjmp	.-196    	; 0x1f8 <main+0x2a>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
