
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  00000afa  00000b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000b6  008000b6  00000be4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010fe  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f8  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ac  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bc  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054b  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002ecf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 11 01 	jmp	0x222	; 0x222 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3b       	cpi	r26, 0xB6	; 182
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 eb       	ldi	r26, 0xB6	; 182
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3c       	cpi	r26, 0xC1	; 193
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 01 	call	0x356	; 0x356 <main>
  8a:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  92:	80 ff       	sbrs	r24, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  96:	ab 9a       	sbi	0x15, 3	; 21
  98:	01 c0       	rjmp	.+2      	; 0x9c <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  9a:	ab 98       	cbi	0x15, 3	; 21

if(nibbleToWrite & 0x02)
  9c:	81 ff       	sbrs	r24, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  a0:	aa 9a       	sbi	0x15, 2	; 21
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  a4:	aa 98       	cbi	0x15, 2	; 21

if(nibbleToWrite & 0x04)
  a6:	82 ff       	sbrs	r24, 2
  a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  aa:	a9 9a       	sbi	0x15, 1	; 21
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  ae:	a9 98       	cbi	0x15, 1	; 21

if(nibbleToWrite & 0x08)
  b0:	83 ff       	sbrs	r24, 3
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  b4:	a8 9a       	sbi	0x15, 0	; 21
  b6:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  b8:	a8 98       	cbi	0x15, 0	; 21
  ba:	08 95       	ret

000000bc <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  c0:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(dataToWrite >> 4);
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  ca:	ac 98       	cbi	0x15, 4	; 21
LCD_E_PORT |= LCD_E;
  cc:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(dataToWrite);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  d4:	ac 98       	cbi	0x15, 4	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	87 ec       	ldi	r24, 0xC7	; 199
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <_LCD_Write+0x1e>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_LCD_Write+0x24>
  e0:	00 00       	nop
_delay_us(50);
}
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  e6:	ad 98       	cbi	0x15, 5	; 21
_LCD_Write(commandToWrite);
  e8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_LCD_Write>

000000ec <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  ec:	ad 9a       	sbi	0x15, 5	; 21
_LCD_Write(dataToWrite);
  ee:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_LCD_Write>

000000f2 <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
while(*text)
  f8:	89 91       	ld	r24, Y+
  fa:	88 23       	and	r24, r24
  fc:	19 f0       	breq	.+6      	; 0x104 <LCD_WriteText+0x12>
  LCD_WriteData(*text++);
  fe:	0e 94 76 00 	call	0xec	; 0xec <LCD_WriteData>
 102:	fa cf       	rjmp	.-12     	; 0xf8 <LCD_WriteText+0x6>
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 10a:	90 e4       	ldi	r25, 0x40	; 64
 10c:	69 9f       	mul	r22, r25
 10e:	80 0d       	add	r24, r0
 110:	11 24       	eor	r1, r1
 112:	80 68       	ori	r24, 0x80	; 128
 114:	0c 94 73 00 	jmp	0xe6	; 0xe6 <LCD_WriteCommand>

00000118 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9f e1       	ldi	r25, 0x1F	; 31
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Clear+0xa>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Clear+0x10>
 128:	00 00       	nop
 12a:	08 95       	ret

0000012c <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Home+0xa>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_Home+0x10>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 140:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 142:	a3 9a       	sbi	0x14, 3	; 20
LCD_DB5_DIR |= LCD_DB5; //
 144:	a2 9a       	sbi	0x14, 2	; 20
LCD_DB6_DIR |= LCD_DB6; //
 146:	a1 9a       	sbi	0x14, 1	; 20
LCD_DB7_DIR |= LCD_DB7; //
 148:	a0 9a       	sbi	0x14, 0	; 20
LCD_E_DIR 	|= LCD_E;   //
 14a:	a4 9a       	sbi	0x14, 4	; 20
LCD_RS_DIR 	|= LCD_RS;  //
 14c:	a5 9a       	sbi	0x14, 5	; 20
 14e:	8f e5       	ldi	r24, 0x5F	; 95
 150:	9a ee       	ldi	r25, 0xEA	; 234
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <LCD_Initalize+0x12>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCD_Initalize+0x18>
 158:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 15a:	ad 98       	cbi	0x15, 5	; 21
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 15c:	ac 98       	cbi	0x15, 4	; 21
 15e:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 160:	ac 9a       	sbi	0x15, 4	; 21
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 168:	ac 98       	cbi	0x15, 4	; 21
 16a:	8f e1       	ldi	r24, 0x1F	; 31
 16c:	9e e4       	ldi	r25, 0x4E	; 78
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Initalize+0x2e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Initalize+0x34>
 174:	00 00       	nop
 176:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 178:	99 f7       	brne	.-26     	; 0x160 <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 17a:	ac 9a       	sbi	0x15, 4	; 21
_LCD_OutNibble(0x02); // tryb 4-bitowy
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 182:	ac 98       	cbi	0x15, 4	; 21
 184:	8f e9       	ldi	r24, 0x9F	; 159
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Initalize+0x48>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Initalize+0x4e>
 18e:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 196:	88 e0       	ldi	r24, 0x08	; 8
 198:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LCD_Initalize+0x66>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LCD_Initalize+0x6c>
 1ac:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
}
 1b6:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1b8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <LCD_WriteCommand>

000001bc <ADC_init>:
 *  Author: Piotr
 */ 
#include "ADC.h"

void ADC_init(void){
	ADMUX |= (1<<REFS0);//ustawiam napiêcie odniesienia na AVCC (napiêcie zasilania uk³adu ~5V)
 1bc:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//ustawienie prescalera na 128 = czêstotliwoœæ taktowania 125kHz
 1be:	86 b1       	in	r24, 0x06	; 6
 1c0:	87 60       	ori	r24, 0x07	; 7
 1c2:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1<<ADEN);//w³¹czenie przetwornika
 1c4:	37 9a       	sbi	0x06, 7	; 6
 1c6:	08 95       	ret

000001c8 <ADC_get>:
	
}
uint16_t ADC_get(uint8_t channel){
	ADMUX=(ADMUX&0b11100000)|(channel&0b00011111);//ustawiam kana³
 1c8:	97 b1       	in	r25, 0x07	; 7
 1ca:	8f 71       	andi	r24, 0x1F	; 31
 1cc:	90 7e       	andi	r25, 0xE0	; 224
 1ce:	89 2b       	or	r24, r25
 1d0:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);//rozpoczynam konwersjê
 1d2:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(1<<ADSC));//czekamy na zakoñczenie tej konwersji
 1d4:	36 99       	sbic	0x06, 6	; 6
 1d6:	fe cf       	rjmp	.-4      	; 0x1d4 <ADC_get+0xc>
	return ADC;
 1d8:	84 b1       	in	r24, 0x04	; 4
 1da:	95 b1       	in	r25, 0x05	; 5
}
 1dc:	08 95       	ret

000001de <RC5_get>:

volatile uint8_t RC5_decoded_flag=0;
volatile uint8_t command, address, toggle;

uint8_t RC5_get(uint8_t* addr, uint8_t* comm, uint8_t* tog){
	if(RC5_decoded_flag){
 1de:	20 91 b6 00 	lds	r18, 0x00B6
 1e2:	22 23       	and	r18, r18
 1e4:	81 f0       	breq	.+32     	; 0x206 <RC5_get+0x28>
		*addr=address;
 1e6:	20 91 be 00 	lds	r18, 0x00BE
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
		*comm=command;
 1ee:	80 91 bf 00 	lds	r24, 0x00BF
 1f2:	fb 01       	movw	r30, r22
 1f4:	80 83       	st	Z, r24
		*tog=toggle;
 1f6:	80 91 c0 00 	lds	r24, 0x00C0
 1fa:	fa 01       	movw	r30, r20
 1fc:	80 83       	st	Z, r24
		RC5_decoded_flag=0;
 1fe:	10 92 b6 00 	sts	0x00B6, r1
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	08 95       	ret
		return 1;		
	}else{
		return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 208:	08 95       	ret

0000020a <RC5_init>:
    //Konfiguracja w pliku control_signals_conf.h
	//DDRD &= (~(1<<PD6));//pin ICP1 jako wejœcie z podci¹ganiem
	//PORTD |= (1<<PD6);

	//taktowanie z preskalera 16MHz/64, timer pracuje w trybie Input Capture (ICR)
	TCCR1B |=(1<<CS11)|(1<<CS10);//preskaler 64
 20a:	8e b5       	in	r24, 0x2e	; 46
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<ICES1);//zbocze opadaj¹ce do pierwszego wyzwolenia
 210:	8e b5       	in	r24, 0x2e	; 46
 212:	8f 7b       	andi	r24, 0xBF	; 191
 214:	8e bd       	out	0x2e, r24	; 46

	TIMSK |= (1<<TICIE1);//aktywowanie przerwania
 216:	89 b7       	in	r24, 0x39	; 57
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	89 bf       	out	0x39, r24	; 57
	RC5_decoded_flag = 0;//zerowanie flagi
 21c:	10 92 b6 00 	sts	0x00B6, r1
 220:	08 95       	ret

00000222 <__vector_6>:
}

//dekodowanie w przerwaniu ICR1
ISR(TIMER1_CAPT_vect){
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	2f 93       	push	r18
 22e:	3f 93       	push	r19
 230:	4f 93       	push	r20
 232:	5f 93       	push	r21
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
	static uint8_t  EdgeCt;//licznik zbocz
	static uint8_t  BitCt;//licznik bitów odebranych
	static uint8_t  BitVal;//wartoœæ aktualnie przetwarzanego bitu
	static uint16_t RC5_tmp;//tymczasowa zmienna do której zapisywane s¹ kolejno odbierane bity

	PulseWidth = ICR1 - LastICR;//szerokoœæ impulsu
 238:	86 b5       	in	r24, 0x26	; 38
 23a:	97 b5       	in	r25, 0x27	; 39
 23c:	20 91 bc 00 	lds	r18, 0x00BC
 240:	30 91 bd 00 	lds	r19, 0x00BD
	LastICR=ICR1;//zapisujemy dane tego zbocza
 244:	46 b5       	in	r20, 0x26	; 38
 246:	57 b5       	in	r21, 0x27	; 39
 248:	50 93 bd 00 	sts	0x00BD, r21
 24c:	40 93 bc 00 	sts	0x00BC, r20

	TCCR1B ^= (1<<ICES1);//zmiana zbocza wyzwalaj¹cego na przeciwne
 250:	4e b5       	in	r20, 0x2e	; 46
 252:	50 e4       	ldi	r21, 0x40	; 64
 254:	45 27       	eor	r20, r21
 256:	4e bd       	out	0x2e, r20	; 46
	

	if(EdgeCt == 0){//jeœli system dekodowania zosta³ wyzerowany
 258:	40 91 bb 00 	lds	r20, 0x00BB
 25c:	41 11       	cpse	r20, r1
 25e:	0c c0       	rjmp	.+24     	; 0x278 <__vector_6+0x56>
		BitCt=0;//resetujemy wszystkie zmienne
 260:	10 92 ba 00 	sts	0x00BA, r1
		BitVal=1;
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	40 93 b9 00 	sts	0x00B9, r20
		RC5_tmp=0;
 26a:	10 92 b8 00 	sts	0x00B8, r1
 26e:	10 92 b7 00 	sts	0x00B7, r1
		TCCR1B &= ~(1<<ICES1);//zbocze opadaj¹ce do pierwszego wyzwolenia
 272:	4e b5       	in	r20, 0x2e	; 46
 274:	4f 7b       	andi	r20, 0xBF	; 191
 276:	4e bd       	out	0x2e, r20	; 46
	static uint8_t  EdgeCt;//licznik zbocz
	static uint8_t  BitCt;//licznik bitów odebranych
	static uint8_t  BitVal;//wartoœæ aktualnie przetwarzanego bitu
	static uint16_t RC5_tmp;//tymczasowa zmienna do której zapisywane s¹ kolejno odbierane bity

	PulseWidth = ICR1 - LastICR;//szerokoœæ impulsu
 278:	88 59       	subi	r24, 0x98	; 152
 27a:	91 09       	sbc	r25, r1
		BitVal=1;
		RC5_tmp=0;
		TCCR1B &= ~(1<<ICES1);//zbocze opadaj¹ce do pierwszego wyzwolenia
	}

	if(PulseWidth < MIN_HALF_BIT || PulseWidth > MAX_BIT){//impuls za d³ugi lub za krótki - reset dekodowania
 27c:	82 1b       	sub	r24, r18
 27e:	93 0b       	sbc	r25, r19
 280:	8a 36       	cpi	r24, 0x6A	; 106
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	92 07       	cpc	r25, r18
 286:	18 f0       	brcs	.+6      	; 0x28e <__vector_6+0x6c>
		EdgeCt=0;
 288:	10 92 bb 00 	sts	0x00BB, r1
 28c:	32 c0       	rjmp	.+100    	; 0x2f2 <__vector_6+0xd0>
 28e:	30 91 bb 00 	lds	r19, 0x00BB
 292:	40 91 ba 00 	lds	r20, 0x00BA
		}else if(PulseWidth >= MIN_HALF_BIT && PulseWidth <= MAX_HALF_BIT){//impuls krótki (1/2 CLK)
 296:	8c 38       	cpi	r24, 0x8C	; 140
 298:	91 05       	cpc	r25, r1
 29a:	a0 f4       	brcc	.+40     	; 0x2c4 <__vector_6+0xa2>
		if(EdgeCt % 2  == 0){//jeœli to parzyste zbocze
 29c:	30 fd       	sbrc	r19, 0
 29e:	10 c0       	rjmp	.+32     	; 0x2c0 <__vector_6+0x9e>
			RC5_tmp<<=1;//to zapisujemy bit
			RC5_tmp|=(uint64_t)BitVal;
 2a0:	20 91 b9 00 	lds	r18, 0x00B9

	if(PulseWidth < MIN_HALF_BIT || PulseWidth > MAX_BIT){//impuls za d³ugi lub za krótki - reset dekodowania
		EdgeCt=0;
		}else if(PulseWidth >= MIN_HALF_BIT && PulseWidth <= MAX_HALF_BIT){//impuls krótki (1/2 CLK)
		if(EdgeCt % 2  == 0){//jeœli to parzyste zbocze
			RC5_tmp<<=1;//to zapisujemy bit
 2a4:	80 91 b7 00 	lds	r24, 0x00B7
 2a8:	90 91 b8 00 	lds	r25, 0x00B8
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
			RC5_tmp|=(uint64_t)BitVal;
 2b0:	82 2b       	or	r24, r18
 2b2:	90 93 b8 00 	sts	0x00B8, r25
 2b6:	80 93 b7 00 	sts	0x00B7, r24
			BitCt++;//i zwiêkszamy licznik odebranych bitów
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	40 93 ba 00 	sts	0x00BA, r20
		}
		EdgeCt++;//zwiêkszamy licznik zbocz
 2c0:	3f 5f       	subi	r19, 0xFF	; 255
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <__vector_6+0xcc>
		}else{//przeciwny wypadek - (PulseWidth > MAX_HALF_BIT && PulseWidth < MAX_BIT)
		//czyli d³ugi impuls (1 CLK)
		BitVal^=0x01;//zmieniamy wartoœæ aktualnie przetwarzanego bitu
 2c4:	20 91 b9 00 	lds	r18, 0x00B9
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	28 27       	eor	r18, r24
 2cc:	20 93 b9 00 	sts	0x00B9, r18
		RC5_tmp<<=1;//i zapisujemy bit
 2d0:	80 91 b7 00 	lds	r24, 0x00B7
 2d4:	90 91 b8 00 	lds	r25, 0x00B8
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
		RC5_tmp|=(uint64_t)BitVal;
 2dc:	82 2b       	or	r24, r18
 2de:	90 93 b8 00 	sts	0x00B8, r25
 2e2:	80 93 b7 00 	sts	0x00B7, r24
		BitCt++;//i zwiêkszamy licznik odebranych bitów
 2e6:	4f 5f       	subi	r20, 0xFF	; 255
 2e8:	40 93 ba 00 	sts	0x00BA, r20
		EdgeCt+=2;//i zwiêkszamy licznik zbocz o 2 (dla porz¹dku)
 2ec:	3e 5f       	subi	r19, 0xFE	; 254
 2ee:	30 93 bb 00 	sts	0x00BB, r19
	}

	if(BitCt==13){//jeœli odebraliœmy ca³¹ ramkê
 2f2:	80 91 ba 00 	lds	r24, 0x00BA
 2f6:	8d 30       	cpi	r24, 0x0D	; 13
 2f8:	19 f5       	brne	.+70     	; 0x340 <__vector_6+0x11e>
		EdgeCt=0;//resetujemy system do obdioru kolejnej
 2fa:	10 92 bb 00 	sts	0x00BB, r1
		if (RC5_decoded_flag == 0) {//i jeœli poprzednie dekodowanie zosta³o odebrane w programie
 2fe:	80 91 b6 00 	lds	r24, 0x00B6
 302:	81 11       	cpse	r24, r1
 304:	1d c0       	rjmp	.+58     	; 0x340 <__vector_6+0x11e>
			command = RC5_tmp & 0b0000000000111111;
 306:	80 91 b7 00 	lds	r24, 0x00B7
 30a:	90 91 b8 00 	lds	r25, 0x00B8
 30e:	28 2f       	mov	r18, r24
 310:	2f 73       	andi	r18, 0x3F	; 63
 312:	20 93 bf 00 	sts	0x00BF, r18
			address = (RC5_tmp & 0b0000011111000000) >> 6;
 316:	9c 01       	movw	r18, r24
 318:	20 7c       	andi	r18, 0xC0	; 192
 31a:	37 70       	andi	r19, 0x07	; 7
 31c:	46 e0       	ldi	r20, 0x06	; 6
 31e:	36 95       	lsr	r19
 320:	27 95       	ror	r18
 322:	4a 95       	dec	r20
 324:	e1 f7       	brne	.-8      	; 0x31e <__vector_6+0xfc>
 326:	20 93 be 00 	sts	0x00BE, r18
			toggle = (RC5_tmp& 0b0000100000000000) >> 11;
 32a:	88 27       	eor	r24, r24
 32c:	98 70       	andi	r25, 0x08	; 8
 32e:	89 2f       	mov	r24, r25
 330:	86 95       	lsr	r24
 332:	86 95       	lsr	r24
 334:	86 95       	lsr	r24
 336:	80 93 c0 00 	sts	0x00C0, r24
			RC5_decoded_flag=1;//i przypisujemy fladze to czy zdekodowano poprawnie ramkê, czy nie
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 b6 00 	sts	0x00B6, r24
		}
	}

 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	5f 91       	pop	r21
 346:	4f 91       	pop	r20
 348:	3f 91       	pop	r19
 34a:	2f 91       	pop	r18
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <main>:



// GÅ‚Ã³wna funkcja
int main(void)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	a4 97       	sbiw	r28, 0x24	; 36
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
// Konfiguracja portÃ³w
    //Przyciski
    Btn_DIR = 0x00;
 36a:	11 ba       	out	0x11, r1	; 17
    Btn_PORT = 0xff;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	82 bb       	out	0x12, r24	; 18
    //Czerowny workLED
    wLED_DIR     |= (1<<wLED);
 370:	a7 9a       	sbi	0x14, 7	; 20
    wLED_PORT    |= (1<<wLED);
 372:	af 9a       	sbi	0x15, 7	; 21
    //Port B, End-stopy(1-5), Czujnik temperatury, przycisk L-
    DDRB = 0x00;
 374:	17 ba       	out	0x17, r1	; 23
    PORTB = 0x9f;
 376:	8f e9       	ldi	r24, 0x9F	; 159
 378:	88 bb       	out	0x18, r24	; 24
    
    
// Inicjalizacje modÃ³Å‚Ã³w
    LCD_Initalize(); // Inicjalizacja LCD
 37a:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_Initalize>
    RC5_init(); // Inizjalizacja RC5
 37e:	0e 94 05 01 	call	0x20a	; 0x20a <RC5_init>
    sei(); // Przerwania
 382:	78 94       	sei
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 384:	80 e8       	ldi	r24, 0x80	; 128
 386:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
    uint8_t btn_off_rc5 = 1;
    
    
// Ekran startowy
    LCD_GoTo(0,0); // Kursor w pierwszyej kolumnie pierwszego wiersza.
    LCD_WriteText("AOS 1");
 38a:	80 e6       	ldi	r24, 0x60	; 96
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
 392:	80 ec       	ldi	r24, 0xC0	; 192
 394:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
    
    LCD_GoTo(0,1); // Kursor w pierwszej kolumnie drugiego wiersza.
    LCD_WriteText("version: 0.1");
 398:	86 e6       	ldi	r24, 0x66	; 102
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
    
//GÅ‚Ã³wna pÄ™tla
    while(1)
    {
// MENU
        if (Btn_LeftPlus || comm == 1)  // L+
 3a0:	87 9b       	sbis	0x10, 7	; 16
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <main+0x54>
 3a4:	8b a1       	ldd	r24, Y+35	; 0x23
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	49 f4       	brne	.+18     	; 0x3bc <main+0x66>
        {
            PORTC &= (~(1<<7));
 3aa:	af 98       	cbi	0x15, 7	; 21
            LCD_Clear();
 3ac:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 3b0:	80 e8       	ldi	r24, 0x80	; 128
 3b2:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("L+");
 3b6:	83 e7       	ldi	r24, 0x73	; 115
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	b8 c0       	rjmp	.+368    	; 0x52c <main+0x1d6>
        }
      else if (Btn_LeftMinus || comm == 2)// L-
 3bc:	b0 9b       	sbis	0x16, 0	; 22
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <main+0x6e>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <main+0x80>
        {
            PORTC |= (1<<7);
 3c4:	af 9a       	sbi	0x15, 7	; 21
            LCD_Clear();
 3c6:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("L-");
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	ab c0       	rjmp	.+342    	; 0x52c <main+0x1d6>
        }
      else if (Btn_PS) // P/S
 3d6:	85 99       	sbic	0x10, 5	; 16
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <main+0x94>
        {
            LCD_Clear();
 3da:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("P/S");
 3e4:	89 e7       	ldi	r24, 0x79	; 121
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	a1 c0       	rjmp	.+322    	; 0x52c <main+0x1d6>
        }
      else if (Btn_S) // S
 3ea:	84 99       	sbic	0x10, 4	; 16
 3ec:	43 c0       	rjmp	.+134    	; 0x474 <main+0x11e>
        {
            LCD_Clear();
 3ee:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 3f2:	80 e8       	ldi	r24, 0x80	; 128
 3f4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("S, End-Stop");
 3f8:	8d e7       	ldi	r24, 0x7D	; 125
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
            while (1)
            {
                if (!End_stop_1)
 400:	b3 9b       	sbis	0x16, 3	; 22
 402:	08 c0       	rjmp	.+16     	; 0x414 <main+0xbe>
                {
                    LCD_Clear();
 404:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 408:	80 e8       	ldi	r24, 0x80	; 128
 40a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,0);
                    LCD_WriteText("1");
 40e:	84 e6       	ldi	r24, 0x64	; 100
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	27 c0       	rjmp	.+78     	; 0x462 <main+0x10c>
                }
                else if (!End_stop_2)
 414:	b4 9b       	sbis	0x16, 4	; 22
 416:	08 c0       	rjmp	.+16     	; 0x428 <main+0xd2>
                {
                    LCD_Clear();
 418:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,0);
                    LCD_WriteText("2");
 422:	89 e8       	ldi	r24, 0x89	; 137
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	1d c0       	rjmp	.+58     	; 0x462 <main+0x10c>
                }
                else if (!End_stop_3)
 428:	b5 9b       	sbis	0x16, 5	; 22
 42a:	08 c0       	rjmp	.+16     	; 0x43c <main+0xe6>
                {
                    LCD_Clear();
 42c:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,0);
                    LCD_WriteText("3");
 436:	8b e8       	ldi	r24, 0x8B	; 139
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	13 c0       	rjmp	.+38     	; 0x462 <main+0x10c>
                }
                else if (!End_stop_4)
 43c:	b6 9b       	sbis	0x16, 6	; 22
 43e:	08 c0       	rjmp	.+16     	; 0x450 <main+0xfa>
                {
                    LCD_Clear();
 440:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 444:	80 e8       	ldi	r24, 0x80	; 128
 446:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,0);
                    LCD_WriteText("4");
 44a:	8d e8       	ldi	r24, 0x8D	; 141
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	09 c0       	rjmp	.+18     	; 0x462 <main+0x10c>
                }
                else if (!End_stop_5)
 450:	b7 9b       	sbis	0x16, 7	; 22
 452:	09 c0       	rjmp	.+18     	; 0x466 <main+0x110>
                {
                    LCD_Clear();
 454:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,0);
                    LCD_WriteText("5");
 45e:	84 e9       	ldi	r24, 0x94	; 148
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
 466:	8f e9       	ldi	r24, 0x9F	; 159
 468:	9f e0       	ldi	r25, 0x0F	; 15
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <main+0x114>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x11a>
 470:	00 00       	nop
 472:	c6 cf       	rjmp	.-116    	; 0x400 <main+0xaa>
                }
                _delay_ms(1); // Eliminacja migotania stykÃ³w
            }
        }
      else if (Btn_M) // M
 474:	83 99       	sbic	0x10, 3	; 16
 476:	3d c0       	rjmp	.+122    	; 0x4f2 <main+0x19c>
        {
            LCD_Clear();
 478:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("M, Rc5");
 482:	8f e8       	ldi	r24, 0x8F	; 143
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
            while(1)
            {
                if(RC5_get(&addr,&comm,&tog))
                {  // sprawdzanie, czy system odbiera sygnaÅ‚y rc5, jeÅ›li tak to wyÅ›wietlamy
                    sprintf(buffer," A:%02d C:%02d T:%02d ",addr,comm,tog);
 48a:	66 e9       	ldi	r22, 0x96	; 150
 48c:	e6 2e       	mov	r14, r22
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	f6 2e       	mov	r15, r22
 492:	8e 01       	movw	r16, r28
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
            LCD_Clear();
            LCD_GoTo(0,0);
            LCD_WriteText("M, Rc5");
            while(1)
            {
                if(RC5_get(&addr,&comm,&tog))
 498:	ae 01       	movw	r20, r28
 49a:	4e 5d       	subi	r20, 0xDE	; 222
 49c:	5f 4f       	sbci	r21, 0xFF	; 255
 49e:	be 01       	movw	r22, r28
 4a0:	6d 5d       	subi	r22, 0xDD	; 221
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	ce 01       	movw	r24, r28
 4a6:	84 96       	adiw	r24, 0x24	; 36
 4a8:	0e 94 ef 00 	call	0x1de	; 0x1de <RC5_get>
 4ac:	88 23       	and	r24, r24
 4ae:	d1 f0       	breq	.+52     	; 0x4e4 <main+0x18e>
                {  // sprawdzanie, czy system odbiera sygnaÅ‚y rc5, jeÅ›li tak to wyÅ›wietlamy
                    sprintf(buffer," A:%02d C:%02d T:%02d ",addr,comm,tog);
 4b0:	8a a1       	ldd	r24, Y+34	; 0x22
 4b2:	1f 92       	push	r1
 4b4:	8f 93       	push	r24
 4b6:	8b a1       	ldd	r24, Y+35	; 0x23
 4b8:	1f 92       	push	r1
 4ba:	8f 93       	push	r24
 4bc:	8c a1       	ldd	r24, Y+36	; 0x24
 4be:	1f 92       	push	r1
 4c0:	8f 93       	push	r24
 4c2:	ff 92       	push	r15
 4c4:	ef 92       	push	r14
 4c6:	1f 93       	push	r17
 4c8:	0f 93       	push	r16
 4ca:	0e 94 aa 02 	call	0x554	; 0x554 <sprintf>
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
                    LCD_GoTo(0,1);
                    LCD_WriteText(buffer);
 4d4:	c8 01       	movw	r24, r16
 4d6:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	8f e9       	ldi	r24, 0x9F	; 159
 4e6:	9f e0       	ldi	r25, 0x0F	; 15
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <main+0x192>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x198>
 4ee:	00 00       	nop
 4f0:	d3 cf       	rjmp	.-90     	; 0x498 <main+0x142>
                }
                _delay_ms(1);
            }
        }
      else if (Btn_Remote) // R
 4f2:	82 99       	sbic	0x10, 2	; 16
 4f4:	08 c0       	rjmp	.+16     	; 0x506 <main+0x1b0>
        {
            LCD_Clear();
 4f6:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 4fa:	80 e8       	ldi	r24, 0x80	; 128
 4fc:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R");
 500:	8d ea       	ldi	r24, 0xAD	; 173
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	13 c0       	rjmp	.+38     	; 0x52c <main+0x1d6>
        }
      else if (Btn_RightMinus) // R-
 506:	81 99       	sbic	0x10, 1	; 16
 508:	08 c0       	rjmp	.+16     	; 0x51a <main+0x1c4>
        {
            LCD_Clear();
 50a:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R-");
 514:	8f ea       	ldi	r24, 0xAF	; 175
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	09 c0       	rjmp	.+18     	; 0x52c <main+0x1d6>
        }
      else if (Btn_RightPlus) // R+
 51a:	80 99       	sbic	0x10, 0	; 16
 51c:	09 c0       	rjmp	.+18     	; 0x530 <main+0x1da>
        {
            LCD_Clear();
 51e:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Clear>
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_WriteCommand>
            LCD_GoTo(0,0);
            LCD_WriteText("R+");
 528:	82 eb       	ldi	r24, 0xB2	; 178
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_WriteText>
        }
       comm=0;
 530:	1b a2       	std	Y+35, r1	; 0x23
        RC5_get(&addr,&comm,&tog);
 532:	ae 01       	movw	r20, r28
 534:	4e 5d       	subi	r20, 0xDE	; 222
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	be 01       	movw	r22, r28
 53a:	6d 5d       	subi	r22, 0xDD	; 221
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	ce 01       	movw	r24, r28
 540:	84 96       	adiw	r24, 0x24	; 36
 542:	0e 94 ef 00 	call	0x1de	; 0x1de <RC5_get>
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <main+0x1f4>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <main+0x1fa>
 550:	00 00       	nop
 552:	26 cf       	rjmp	.-436    	; 0x3a0 <main+0x4a>

00000554 <sprintf>:
 554:	ae e0       	ldi	r26, 0x0E	; 14
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e0 eb       	ldi	r30, 0xB0	; 176
 55a:	f2 e0       	ldi	r31, 0x02	; 2
 55c:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__prologue_saves__+0x1c>
 560:	0d 89       	ldd	r16, Y+21	; 0x15
 562:	1e 89       	ldd	r17, Y+22	; 0x16
 564:	86 e0       	ldi	r24, 0x06	; 6
 566:	8c 83       	std	Y+4, r24	; 0x04
 568:	1a 83       	std	Y+2, r17	; 0x02
 56a:	09 83       	std	Y+1, r16	; 0x01
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	9f e7       	ldi	r25, 0x7F	; 127
 570:	9e 83       	std	Y+6, r25	; 0x06
 572:	8d 83       	std	Y+5, r24	; 0x05
 574:	ae 01       	movw	r20, r28
 576:	47 5e       	subi	r20, 0xE7	; 231
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	6f 89       	ldd	r22, Y+23	; 0x17
 57c:	78 8d       	ldd	r23, Y+24	; 0x18
 57e:	ce 01       	movw	r24, r28
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	0e 94 cc 02 	call	0x598	; 0x598 <vfprintf>
 586:	ef 81       	ldd	r30, Y+7	; 0x07
 588:	f8 85       	ldd	r31, Y+8	; 0x08
 58a:	e0 0f       	add	r30, r16
 58c:	f1 1f       	adc	r31, r17
 58e:	10 82       	st	Z, r1
 590:	2e 96       	adiw	r28, 0x0e	; 14
 592:	e4 e0       	ldi	r30, 0x04	; 4
 594:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__epilogue_restores__+0x1c>

00000598 <vfprintf>:
 598:	ac e0       	ldi	r26, 0x0C	; 12
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e2 ed       	ldi	r30, 0xD2	; 210
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__prologue_saves__>
 5a4:	7c 01       	movw	r14, r24
 5a6:	6b 01       	movw	r12, r22
 5a8:	8a 01       	movw	r16, r20
 5aa:	fc 01       	movw	r30, r24
 5ac:	17 82       	std	Z+7, r1	; 0x07
 5ae:	16 82       	std	Z+6, r1	; 0x06
 5b0:	83 81       	ldd	r24, Z+3	; 0x03
 5b2:	81 ff       	sbrs	r24, 1
 5b4:	bd c1       	rjmp	.+890    	; 0x930 <__stack+0xd1>
 5b6:	ce 01       	movw	r24, r28
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	4c 01       	movw	r8, r24
 5bc:	f7 01       	movw	r30, r14
 5be:	93 81       	ldd	r25, Z+3	; 0x03
 5c0:	f6 01       	movw	r30, r12
 5c2:	93 fd       	sbrc	r25, 3
 5c4:	85 91       	lpm	r24, Z+
 5c6:	93 ff       	sbrs	r25, 3
 5c8:	81 91       	ld	r24, Z+
 5ca:	6f 01       	movw	r12, r30
 5cc:	88 23       	and	r24, r24
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <vfprintf+0x3a>
 5d0:	ab c1       	rjmp	.+854    	; 0x928 <__stack+0xc9>
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	39 f4       	brne	.+14     	; 0x5e4 <vfprintf+0x4c>
 5d6:	93 fd       	sbrc	r25, 3
 5d8:	85 91       	lpm	r24, Z+
 5da:	93 ff       	sbrs	r25, 3
 5dc:	81 91       	ld	r24, Z+
 5de:	6f 01       	movw	r12, r30
 5e0:	85 32       	cpi	r24, 0x25	; 37
 5e2:	29 f4       	brne	.+10     	; 0x5ee <vfprintf+0x56>
 5e4:	b7 01       	movw	r22, r14
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 5ec:	e7 cf       	rjmp	.-50     	; 0x5bc <vfprintf+0x24>
 5ee:	51 2c       	mov	r5, r1
 5f0:	31 2c       	mov	r3, r1
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	20 32       	cpi	r18, 0x20	; 32
 5f6:	a0 f4       	brcc	.+40     	; 0x620 <vfprintf+0x88>
 5f8:	8b 32       	cpi	r24, 0x2B	; 43
 5fa:	69 f0       	breq	.+26     	; 0x616 <vfprintf+0x7e>
 5fc:	30 f4       	brcc	.+12     	; 0x60a <vfprintf+0x72>
 5fe:	80 32       	cpi	r24, 0x20	; 32
 600:	59 f0       	breq	.+22     	; 0x618 <vfprintf+0x80>
 602:	83 32       	cpi	r24, 0x23	; 35
 604:	69 f4       	brne	.+26     	; 0x620 <vfprintf+0x88>
 606:	20 61       	ori	r18, 0x10	; 16
 608:	2c c0       	rjmp	.+88     	; 0x662 <vfprintf+0xca>
 60a:	8d 32       	cpi	r24, 0x2D	; 45
 60c:	39 f0       	breq	.+14     	; 0x61c <vfprintf+0x84>
 60e:	80 33       	cpi	r24, 0x30	; 48
 610:	39 f4       	brne	.+14     	; 0x620 <vfprintf+0x88>
 612:	21 60       	ori	r18, 0x01	; 1
 614:	26 c0       	rjmp	.+76     	; 0x662 <vfprintf+0xca>
 616:	22 60       	ori	r18, 0x02	; 2
 618:	24 60       	ori	r18, 0x04	; 4
 61a:	23 c0       	rjmp	.+70     	; 0x662 <vfprintf+0xca>
 61c:	28 60       	ori	r18, 0x08	; 8
 61e:	21 c0       	rjmp	.+66     	; 0x662 <vfprintf+0xca>
 620:	27 fd       	sbrc	r18, 7
 622:	27 c0       	rjmp	.+78     	; 0x672 <vfprintf+0xda>
 624:	30 ed       	ldi	r19, 0xD0	; 208
 626:	38 0f       	add	r19, r24
 628:	3a 30       	cpi	r19, 0x0A	; 10
 62a:	78 f4       	brcc	.+30     	; 0x64a <vfprintf+0xb2>
 62c:	26 ff       	sbrs	r18, 6
 62e:	06 c0       	rjmp	.+12     	; 0x63c <vfprintf+0xa4>
 630:	fa e0       	ldi	r31, 0x0A	; 10
 632:	5f 9e       	mul	r5, r31
 634:	30 0d       	add	r19, r0
 636:	11 24       	eor	r1, r1
 638:	53 2e       	mov	r5, r19
 63a:	13 c0       	rjmp	.+38     	; 0x662 <vfprintf+0xca>
 63c:	8a e0       	ldi	r24, 0x0A	; 10
 63e:	38 9e       	mul	r3, r24
 640:	30 0d       	add	r19, r0
 642:	11 24       	eor	r1, r1
 644:	33 2e       	mov	r3, r19
 646:	20 62       	ori	r18, 0x20	; 32
 648:	0c c0       	rjmp	.+24     	; 0x662 <vfprintf+0xca>
 64a:	8e 32       	cpi	r24, 0x2E	; 46
 64c:	21 f4       	brne	.+8      	; 0x656 <vfprintf+0xbe>
 64e:	26 fd       	sbrc	r18, 6
 650:	6b c1       	rjmp	.+726    	; 0x928 <__stack+0xc9>
 652:	20 64       	ori	r18, 0x40	; 64
 654:	06 c0       	rjmp	.+12     	; 0x662 <vfprintf+0xca>
 656:	8c 36       	cpi	r24, 0x6C	; 108
 658:	11 f4       	brne	.+4      	; 0x65e <vfprintf+0xc6>
 65a:	20 68       	ori	r18, 0x80	; 128
 65c:	02 c0       	rjmp	.+4      	; 0x662 <vfprintf+0xca>
 65e:	88 36       	cpi	r24, 0x68	; 104
 660:	41 f4       	brne	.+16     	; 0x672 <vfprintf+0xda>
 662:	f6 01       	movw	r30, r12
 664:	93 fd       	sbrc	r25, 3
 666:	85 91       	lpm	r24, Z+
 668:	93 ff       	sbrs	r25, 3
 66a:	81 91       	ld	r24, Z+
 66c:	6f 01       	movw	r12, r30
 66e:	81 11       	cpse	r24, r1
 670:	c1 cf       	rjmp	.-126    	; 0x5f4 <vfprintf+0x5c>
 672:	98 2f       	mov	r25, r24
 674:	9f 7d       	andi	r25, 0xDF	; 223
 676:	95 54       	subi	r25, 0x45	; 69
 678:	93 30       	cpi	r25, 0x03	; 3
 67a:	28 f4       	brcc	.+10     	; 0x686 <vfprintf+0xee>
 67c:	0c 5f       	subi	r16, 0xFC	; 252
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	ff e3       	ldi	r31, 0x3F	; 63
 682:	f9 83       	std	Y+1, r31	; 0x01
 684:	0d c0       	rjmp	.+26     	; 0x6a0 <vfprintf+0x108>
 686:	83 36       	cpi	r24, 0x63	; 99
 688:	31 f0       	breq	.+12     	; 0x696 <vfprintf+0xfe>
 68a:	83 37       	cpi	r24, 0x73	; 115
 68c:	71 f0       	breq	.+28     	; 0x6aa <vfprintf+0x112>
 68e:	83 35       	cpi	r24, 0x53	; 83
 690:	09 f0       	breq	.+2      	; 0x694 <vfprintf+0xfc>
 692:	5b c0       	rjmp	.+182    	; 0x74a <vfprintf+0x1b2>
 694:	22 c0       	rjmp	.+68     	; 0x6da <vfprintf+0x142>
 696:	f8 01       	movw	r30, r16
 698:	80 81       	ld	r24, Z
 69a:	89 83       	std	Y+1, r24	; 0x01
 69c:	0e 5f       	subi	r16, 0xFE	; 254
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
 6a0:	44 24       	eor	r4, r4
 6a2:	43 94       	inc	r4
 6a4:	51 2c       	mov	r5, r1
 6a6:	54 01       	movw	r10, r8
 6a8:	15 c0       	rjmp	.+42     	; 0x6d4 <vfprintf+0x13c>
 6aa:	38 01       	movw	r6, r16
 6ac:	f2 e0       	ldi	r31, 0x02	; 2
 6ae:	6f 0e       	add	r6, r31
 6b0:	71 1c       	adc	r7, r1
 6b2:	f8 01       	movw	r30, r16
 6b4:	a0 80       	ld	r10, Z
 6b6:	b1 80       	ldd	r11, Z+1	; 0x01
 6b8:	26 ff       	sbrs	r18, 6
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <vfprintf+0x12a>
 6bc:	65 2d       	mov	r22, r5
 6be:	70 e0       	ldi	r23, 0x00	; 0
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <vfprintf+0x12e>
 6c2:	6f ef       	ldi	r22, 0xFF	; 255
 6c4:	7f ef       	ldi	r23, 0xFF	; 255
 6c6:	c5 01       	movw	r24, r10
 6c8:	2c 87       	std	Y+12, r18	; 0x0c
 6ca:	0e 94 a9 04 	call	0x952	; 0x952 <strnlen>
 6ce:	2c 01       	movw	r4, r24
 6d0:	83 01       	movw	r16, r6
 6d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d4:	2f 77       	andi	r18, 0x7F	; 127
 6d6:	22 2e       	mov	r2, r18
 6d8:	17 c0       	rjmp	.+46     	; 0x708 <vfprintf+0x170>
 6da:	38 01       	movw	r6, r16
 6dc:	f2 e0       	ldi	r31, 0x02	; 2
 6de:	6f 0e       	add	r6, r31
 6e0:	71 1c       	adc	r7, r1
 6e2:	f8 01       	movw	r30, r16
 6e4:	a0 80       	ld	r10, Z
 6e6:	b1 80       	ldd	r11, Z+1	; 0x01
 6e8:	26 ff       	sbrs	r18, 6
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <vfprintf+0x15a>
 6ec:	65 2d       	mov	r22, r5
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x15e>
 6f2:	6f ef       	ldi	r22, 0xFF	; 255
 6f4:	7f ef       	ldi	r23, 0xFF	; 255
 6f6:	c5 01       	movw	r24, r10
 6f8:	2c 87       	std	Y+12, r18	; 0x0c
 6fa:	0e 94 9e 04 	call	0x93c	; 0x93c <strnlen_P>
 6fe:	2c 01       	movw	r4, r24
 700:	2c 85       	ldd	r18, Y+12	; 0x0c
 702:	20 68       	ori	r18, 0x80	; 128
 704:	22 2e       	mov	r2, r18
 706:	83 01       	movw	r16, r6
 708:	23 fc       	sbrc	r2, 3
 70a:	1b c0       	rjmp	.+54     	; 0x742 <vfprintf+0x1aa>
 70c:	83 2d       	mov	r24, r3
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	48 16       	cp	r4, r24
 712:	59 06       	cpc	r5, r25
 714:	b0 f4       	brcc	.+44     	; 0x742 <vfprintf+0x1aa>
 716:	b7 01       	movw	r22, r14
 718:	80 e2       	ldi	r24, 0x20	; 32
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 720:	3a 94       	dec	r3
 722:	f4 cf       	rjmp	.-24     	; 0x70c <vfprintf+0x174>
 724:	f5 01       	movw	r30, r10
 726:	27 fc       	sbrc	r2, 7
 728:	85 91       	lpm	r24, Z+
 72a:	27 fe       	sbrs	r2, 7
 72c:	81 91       	ld	r24, Z+
 72e:	5f 01       	movw	r10, r30
 730:	b7 01       	movw	r22, r14
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 738:	31 10       	cpse	r3, r1
 73a:	3a 94       	dec	r3
 73c:	f1 e0       	ldi	r31, 0x01	; 1
 73e:	4f 1a       	sub	r4, r31
 740:	51 08       	sbc	r5, r1
 742:	41 14       	cp	r4, r1
 744:	51 04       	cpc	r5, r1
 746:	71 f7       	brne	.-36     	; 0x724 <vfprintf+0x18c>
 748:	e5 c0       	rjmp	.+458    	; 0x914 <__stack+0xb5>
 74a:	84 36       	cpi	r24, 0x64	; 100
 74c:	11 f0       	breq	.+4      	; 0x752 <vfprintf+0x1ba>
 74e:	89 36       	cpi	r24, 0x69	; 105
 750:	39 f5       	brne	.+78     	; 0x7a0 <vfprintf+0x208>
 752:	f8 01       	movw	r30, r16
 754:	27 ff       	sbrs	r18, 7
 756:	07 c0       	rjmp	.+14     	; 0x766 <vfprintf+0x1ce>
 758:	60 81       	ld	r22, Z
 75a:	71 81       	ldd	r23, Z+1	; 0x01
 75c:	82 81       	ldd	r24, Z+2	; 0x02
 75e:	93 81       	ldd	r25, Z+3	; 0x03
 760:	0c 5f       	subi	r16, 0xFC	; 252
 762:	1f 4f       	sbci	r17, 0xFF	; 255
 764:	08 c0       	rjmp	.+16     	; 0x776 <vfprintf+0x1de>
 766:	60 81       	ld	r22, Z
 768:	71 81       	ldd	r23, Z+1	; 0x01
 76a:	88 27       	eor	r24, r24
 76c:	77 fd       	sbrc	r23, 7
 76e:	80 95       	com	r24
 770:	98 2f       	mov	r25, r24
 772:	0e 5f       	subi	r16, 0xFE	; 254
 774:	1f 4f       	sbci	r17, 0xFF	; 255
 776:	2f 76       	andi	r18, 0x6F	; 111
 778:	b2 2e       	mov	r11, r18
 77a:	97 ff       	sbrs	r25, 7
 77c:	09 c0       	rjmp	.+18     	; 0x790 <vfprintf+0x1f8>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	20 68       	ori	r18, 0x80	; 128
 78e:	b2 2e       	mov	r11, r18
 790:	2a e0       	ldi	r18, 0x0A	; 10
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	a4 01       	movw	r20, r8
 796:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__ultoa_invert>
 79a:	a8 2e       	mov	r10, r24
 79c:	a8 18       	sub	r10, r8
 79e:	44 c0       	rjmp	.+136    	; 0x828 <vfprintf+0x290>
 7a0:	85 37       	cpi	r24, 0x75	; 117
 7a2:	29 f4       	brne	.+10     	; 0x7ae <vfprintf+0x216>
 7a4:	2f 7e       	andi	r18, 0xEF	; 239
 7a6:	b2 2e       	mov	r11, r18
 7a8:	2a e0       	ldi	r18, 0x0A	; 10
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	25 c0       	rjmp	.+74     	; 0x7f8 <vfprintf+0x260>
 7ae:	f2 2f       	mov	r31, r18
 7b0:	f9 7f       	andi	r31, 0xF9	; 249
 7b2:	bf 2e       	mov	r11, r31
 7b4:	8f 36       	cpi	r24, 0x6F	; 111
 7b6:	c1 f0       	breq	.+48     	; 0x7e8 <vfprintf+0x250>
 7b8:	18 f4       	brcc	.+6      	; 0x7c0 <vfprintf+0x228>
 7ba:	88 35       	cpi	r24, 0x58	; 88
 7bc:	79 f0       	breq	.+30     	; 0x7dc <vfprintf+0x244>
 7be:	b4 c0       	rjmp	.+360    	; 0x928 <__stack+0xc9>
 7c0:	80 37       	cpi	r24, 0x70	; 112
 7c2:	19 f0       	breq	.+6      	; 0x7ca <vfprintf+0x232>
 7c4:	88 37       	cpi	r24, 0x78	; 120
 7c6:	21 f0       	breq	.+8      	; 0x7d0 <vfprintf+0x238>
 7c8:	af c0       	rjmp	.+350    	; 0x928 <__stack+0xc9>
 7ca:	2f 2f       	mov	r18, r31
 7cc:	20 61       	ori	r18, 0x10	; 16
 7ce:	b2 2e       	mov	r11, r18
 7d0:	b4 fe       	sbrs	r11, 4
 7d2:	0d c0       	rjmp	.+26     	; 0x7ee <vfprintf+0x256>
 7d4:	8b 2d       	mov	r24, r11
 7d6:	84 60       	ori	r24, 0x04	; 4
 7d8:	b8 2e       	mov	r11, r24
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <vfprintf+0x256>
 7dc:	24 ff       	sbrs	r18, 4
 7de:	0a c0       	rjmp	.+20     	; 0x7f4 <vfprintf+0x25c>
 7e0:	9f 2f       	mov	r25, r31
 7e2:	96 60       	ori	r25, 0x06	; 6
 7e4:	b9 2e       	mov	r11, r25
 7e6:	06 c0       	rjmp	.+12     	; 0x7f4 <vfprintf+0x25c>
 7e8:	28 e0       	ldi	r18, 0x08	; 8
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <vfprintf+0x260>
 7ee:	20 e1       	ldi	r18, 0x10	; 16
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x260>
 7f4:	20 e1       	ldi	r18, 0x10	; 16
 7f6:	32 e0       	ldi	r19, 0x02	; 2
 7f8:	f8 01       	movw	r30, r16
 7fa:	b7 fe       	sbrs	r11, 7
 7fc:	07 c0       	rjmp	.+14     	; 0x80c <vfprintf+0x274>
 7fe:	60 81       	ld	r22, Z
 800:	71 81       	ldd	r23, Z+1	; 0x01
 802:	82 81       	ldd	r24, Z+2	; 0x02
 804:	93 81       	ldd	r25, Z+3	; 0x03
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	06 c0       	rjmp	.+12     	; 0x818 <vfprintf+0x280>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 5f       	subi	r16, 0xFE	; 254
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	a4 01       	movw	r20, r8
 81a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__ultoa_invert>
 81e:	a8 2e       	mov	r10, r24
 820:	a8 18       	sub	r10, r8
 822:	fb 2d       	mov	r31, r11
 824:	ff 77       	andi	r31, 0x7F	; 127
 826:	bf 2e       	mov	r11, r31
 828:	b6 fe       	sbrs	r11, 6
 82a:	0b c0       	rjmp	.+22     	; 0x842 <vfprintf+0x2aa>
 82c:	2b 2d       	mov	r18, r11
 82e:	2e 7f       	andi	r18, 0xFE	; 254
 830:	a5 14       	cp	r10, r5
 832:	50 f4       	brcc	.+20     	; 0x848 <vfprintf+0x2b0>
 834:	b4 fe       	sbrs	r11, 4
 836:	0a c0       	rjmp	.+20     	; 0x84c <vfprintf+0x2b4>
 838:	b2 fc       	sbrc	r11, 2
 83a:	08 c0       	rjmp	.+16     	; 0x84c <vfprintf+0x2b4>
 83c:	2b 2d       	mov	r18, r11
 83e:	2e 7e       	andi	r18, 0xEE	; 238
 840:	05 c0       	rjmp	.+10     	; 0x84c <vfprintf+0x2b4>
 842:	7a 2c       	mov	r7, r10
 844:	2b 2d       	mov	r18, r11
 846:	03 c0       	rjmp	.+6      	; 0x84e <vfprintf+0x2b6>
 848:	7a 2c       	mov	r7, r10
 84a:	01 c0       	rjmp	.+2      	; 0x84e <vfprintf+0x2b6>
 84c:	75 2c       	mov	r7, r5
 84e:	24 ff       	sbrs	r18, 4
 850:	0d c0       	rjmp	.+26     	; 0x86c <__stack+0xd>
 852:	fe 01       	movw	r30, r28
 854:	ea 0d       	add	r30, r10
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	80 33       	cpi	r24, 0x30	; 48
 85c:	11 f4       	brne	.+4      	; 0x862 <__stack+0x3>
 85e:	29 7e       	andi	r18, 0xE9	; 233
 860:	09 c0       	rjmp	.+18     	; 0x874 <__stack+0x15>
 862:	22 ff       	sbrs	r18, 2
 864:	06 c0       	rjmp	.+12     	; 0x872 <__stack+0x13>
 866:	73 94       	inc	r7
 868:	73 94       	inc	r7
 86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
 86c:	82 2f       	mov	r24, r18
 86e:	86 78       	andi	r24, 0x86	; 134
 870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
 872:	73 94       	inc	r7
 874:	23 fd       	sbrc	r18, 3
 876:	13 c0       	rjmp	.+38     	; 0x89e <__stack+0x3f>
 878:	20 ff       	sbrs	r18, 0
 87a:	06 c0       	rjmp	.+12     	; 0x888 <__stack+0x29>
 87c:	5a 2c       	mov	r5, r10
 87e:	73 14       	cp	r7, r3
 880:	18 f4       	brcc	.+6      	; 0x888 <__stack+0x29>
 882:	53 0c       	add	r5, r3
 884:	57 18       	sub	r5, r7
 886:	73 2c       	mov	r7, r3
 888:	73 14       	cp	r7, r3
 88a:	68 f4       	brcc	.+26     	; 0x8a6 <__stack+0x47>
 88c:	b7 01       	movw	r22, r14
 88e:	80 e2       	ldi	r24, 0x20	; 32
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	2c 87       	std	Y+12, r18	; 0x0c
 894:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 898:	73 94       	inc	r7
 89a:	2c 85       	ldd	r18, Y+12	; 0x0c
 89c:	f5 cf       	rjmp	.-22     	; 0x888 <__stack+0x29>
 89e:	73 14       	cp	r7, r3
 8a0:	10 f4       	brcc	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	37 18       	sub	r3, r7
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
 8a6:	31 2c       	mov	r3, r1
 8a8:	24 ff       	sbrs	r18, 4
 8aa:	12 c0       	rjmp	.+36     	; 0x8d0 <__stack+0x71>
 8ac:	b7 01       	movw	r22, r14
 8ae:	80 e3       	ldi	r24, 0x30	; 48
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	2c 87       	std	Y+12, r18	; 0x0c
 8b4:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8b8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ba:	22 ff       	sbrs	r18, 2
 8bc:	17 c0       	rjmp	.+46     	; 0x8ec <__stack+0x8d>
 8be:	21 ff       	sbrs	r18, 1
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__stack+0x69>
 8c2:	88 e5       	ldi	r24, 0x58	; 88
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	88 e7       	ldi	r24, 0x78	; 120
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	b7 01       	movw	r22, r14
 8ce:	0c c0       	rjmp	.+24     	; 0x8e8 <__stack+0x89>
 8d0:	82 2f       	mov	r24, r18
 8d2:	86 78       	andi	r24, 0x86	; 134
 8d4:	59 f0       	breq	.+22     	; 0x8ec <__stack+0x8d>
 8d6:	21 fd       	sbrc	r18, 1
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <__stack+0x81>
 8de:	8b e2       	ldi	r24, 0x2B	; 43
 8e0:	27 fd       	sbrc	r18, 7
 8e2:	8d e2       	ldi	r24, 0x2D	; 45
 8e4:	b7 01       	movw	r22, r14
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8ec:	a5 14       	cp	r10, r5
 8ee:	38 f4       	brcc	.+14     	; 0x8fe <__stack+0x9f>
 8f0:	b7 01       	movw	r22, r14
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 8fa:	5a 94       	dec	r5
 8fc:	f7 cf       	rjmp	.-18     	; 0x8ec <__stack+0x8d>
 8fe:	aa 94       	dec	r10
 900:	f4 01       	movw	r30, r8
 902:	ea 0d       	add	r30, r10
 904:	f1 1d       	adc	r31, r1
 906:	80 81       	ld	r24, Z
 908:	b7 01       	movw	r22, r14
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 910:	a1 10       	cpse	r10, r1
 912:	f5 cf       	rjmp	.-22     	; 0x8fe <__stack+0x9f>
 914:	33 20       	and	r3, r3
 916:	09 f4       	brne	.+2      	; 0x91a <__stack+0xbb>
 918:	51 ce       	rjmp	.-862    	; 0x5bc <vfprintf+0x24>
 91a:	b7 01       	movw	r22, r14
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 b4 04 	call	0x968	; 0x968 <fputc>
 924:	3a 94       	dec	r3
 926:	f6 cf       	rjmp	.-20     	; 0x914 <__stack+0xb5>
 928:	f7 01       	movw	r30, r14
 92a:	86 81       	ldd	r24, Z+6	; 0x06
 92c:	97 81       	ldd	r25, Z+7	; 0x07
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
 930:	8f ef       	ldi	r24, 0xFF	; 255
 932:	9f ef       	ldi	r25, 0xFF	; 255
 934:	2c 96       	adiw	r28, 0x0c	; 12
 936:	e2 e1       	ldi	r30, 0x12	; 18
 938:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__epilogue_restores__>

0000093c <strnlen_P>:
 93c:	fc 01       	movw	r30, r24
 93e:	05 90       	lpm	r0, Z+
 940:	61 50       	subi	r22, 0x01	; 1
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	01 10       	cpse	r0, r1
 946:	d8 f7       	brcc	.-10     	; 0x93e <strnlen_P+0x2>
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	8e 0f       	add	r24, r30
 94e:	9f 1f       	adc	r25, r31
 950:	08 95       	ret

00000952 <strnlen>:
 952:	fc 01       	movw	r30, r24
 954:	61 50       	subi	r22, 0x01	; 1
 956:	70 40       	sbci	r23, 0x00	; 0
 958:	01 90       	ld	r0, Z+
 95a:	01 10       	cpse	r0, r1
 95c:	d8 f7       	brcc	.-10     	; 0x954 <strnlen+0x2>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	8e 0f       	add	r24, r30
 964:	9f 1f       	adc	r25, r31
 966:	08 95       	ret

00000968 <fputc>:
 968:	0f 93       	push	r16
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	18 2f       	mov	r17, r24
 972:	09 2f       	mov	r16, r25
 974:	eb 01       	movw	r28, r22
 976:	8b 81       	ldd	r24, Y+3	; 0x03
 978:	81 fd       	sbrc	r24, 1
 97a:	03 c0       	rjmp	.+6      	; 0x982 <fputc+0x1a>
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	20 c0       	rjmp	.+64     	; 0x9c2 <fputc+0x5a>
 982:	82 ff       	sbrs	r24, 2
 984:	10 c0       	rjmp	.+32     	; 0x9a6 <fputc+0x3e>
 986:	4e 81       	ldd	r20, Y+6	; 0x06
 988:	5f 81       	ldd	r21, Y+7	; 0x07
 98a:	2c 81       	ldd	r18, Y+4	; 0x04
 98c:	3d 81       	ldd	r19, Y+5	; 0x05
 98e:	42 17       	cp	r20, r18
 990:	53 07       	cpc	r21, r19
 992:	7c f4       	brge	.+30     	; 0x9b2 <fputc+0x4a>
 994:	e8 81       	ld	r30, Y
 996:	f9 81       	ldd	r31, Y+1	; 0x01
 998:	9f 01       	movw	r18, r30
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	3f 4f       	sbci	r19, 0xFF	; 255
 99e:	39 83       	std	Y+1, r19	; 0x01
 9a0:	28 83       	st	Y, r18
 9a2:	10 83       	st	Z, r17
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <fputc+0x4a>
 9a6:	e8 85       	ldd	r30, Y+8	; 0x08
 9a8:	f9 85       	ldd	r31, Y+9	; 0x09
 9aa:	81 2f       	mov	r24, r17
 9ac:	09 95       	icall
 9ae:	89 2b       	or	r24, r25
 9b0:	29 f7       	brne	.-54     	; 0x97c <fputc+0x14>
 9b2:	2e 81       	ldd	r18, Y+6	; 0x06
 9b4:	3f 81       	ldd	r19, Y+7	; 0x07
 9b6:	2f 5f       	subi	r18, 0xFF	; 255
 9b8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ba:	3f 83       	std	Y+7, r19	; 0x07
 9bc:	2e 83       	std	Y+6, r18	; 0x06
 9be:	81 2f       	mov	r24, r17
 9c0:	90 2f       	mov	r25, r16
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
 9ca:	08 95       	ret

000009cc <__ultoa_invert>:
 9cc:	fa 01       	movw	r30, r20
 9ce:	aa 27       	eor	r26, r26
 9d0:	28 30       	cpi	r18, 0x08	; 8
 9d2:	51 f1       	breq	.+84     	; 0xa28 <__ultoa_invert+0x5c>
 9d4:	20 31       	cpi	r18, 0x10	; 16
 9d6:	81 f1       	breq	.+96     	; 0xa38 <__ultoa_invert+0x6c>
 9d8:	e8 94       	clt
 9da:	6f 93       	push	r22
 9dc:	6e 7f       	andi	r22, 0xFE	; 254
 9de:	6e 5f       	subi	r22, 0xFE	; 254
 9e0:	7f 4f       	sbci	r23, 0xFF	; 255
 9e2:	8f 4f       	sbci	r24, 0xFF	; 255
 9e4:	9f 4f       	sbci	r25, 0xFF	; 255
 9e6:	af 4f       	sbci	r26, 0xFF	; 255
 9e8:	b1 e0       	ldi	r27, 0x01	; 1
 9ea:	3e d0       	rcall	.+124    	; 0xa68 <__ultoa_invert+0x9c>
 9ec:	b4 e0       	ldi	r27, 0x04	; 4
 9ee:	3c d0       	rcall	.+120    	; 0xa68 <__ultoa_invert+0x9c>
 9f0:	67 0f       	add	r22, r23
 9f2:	78 1f       	adc	r23, r24
 9f4:	89 1f       	adc	r24, r25
 9f6:	9a 1f       	adc	r25, r26
 9f8:	a1 1d       	adc	r26, r1
 9fa:	68 0f       	add	r22, r24
 9fc:	79 1f       	adc	r23, r25
 9fe:	8a 1f       	adc	r24, r26
 a00:	91 1d       	adc	r25, r1
 a02:	a1 1d       	adc	r26, r1
 a04:	6a 0f       	add	r22, r26
 a06:	71 1d       	adc	r23, r1
 a08:	81 1d       	adc	r24, r1
 a0a:	91 1d       	adc	r25, r1
 a0c:	a1 1d       	adc	r26, r1
 a0e:	20 d0       	rcall	.+64     	; 0xa50 <__ultoa_invert+0x84>
 a10:	09 f4       	brne	.+2      	; 0xa14 <__ultoa_invert+0x48>
 a12:	68 94       	set
 a14:	3f 91       	pop	r19
 a16:	2a e0       	ldi	r18, 0x0A	; 10
 a18:	26 9f       	mul	r18, r22
 a1a:	11 24       	eor	r1, r1
 a1c:	30 19       	sub	r19, r0
 a1e:	30 5d       	subi	r19, 0xD0	; 208
 a20:	31 93       	st	Z+, r19
 a22:	de f6       	brtc	.-74     	; 0x9da <__ultoa_invert+0xe>
 a24:	cf 01       	movw	r24, r30
 a26:	08 95       	ret
 a28:	46 2f       	mov	r20, r22
 a2a:	47 70       	andi	r20, 0x07	; 7
 a2c:	40 5d       	subi	r20, 0xD0	; 208
 a2e:	41 93       	st	Z+, r20
 a30:	b3 e0       	ldi	r27, 0x03	; 3
 a32:	0f d0       	rcall	.+30     	; 0xa52 <__ultoa_invert+0x86>
 a34:	c9 f7       	brne	.-14     	; 0xa28 <__ultoa_invert+0x5c>
 a36:	f6 cf       	rjmp	.-20     	; 0xa24 <__ultoa_invert+0x58>
 a38:	46 2f       	mov	r20, r22
 a3a:	4f 70       	andi	r20, 0x0F	; 15
 a3c:	40 5d       	subi	r20, 0xD0	; 208
 a3e:	4a 33       	cpi	r20, 0x3A	; 58
 a40:	18 f0       	brcs	.+6      	; 0xa48 <__ultoa_invert+0x7c>
 a42:	49 5d       	subi	r20, 0xD9	; 217
 a44:	31 fd       	sbrc	r19, 1
 a46:	40 52       	subi	r20, 0x20	; 32
 a48:	41 93       	st	Z+, r20
 a4a:	02 d0       	rcall	.+4      	; 0xa50 <__ultoa_invert+0x84>
 a4c:	a9 f7       	brne	.-22     	; 0xa38 <__ultoa_invert+0x6c>
 a4e:	ea cf       	rjmp	.-44     	; 0xa24 <__ultoa_invert+0x58>
 a50:	b4 e0       	ldi	r27, 0x04	; 4
 a52:	a6 95       	lsr	r26
 a54:	97 95       	ror	r25
 a56:	87 95       	ror	r24
 a58:	77 95       	ror	r23
 a5a:	67 95       	ror	r22
 a5c:	ba 95       	dec	r27
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__ultoa_invert+0x86>
 a60:	00 97       	sbiw	r24, 0x00	; 0
 a62:	61 05       	cpc	r22, r1
 a64:	71 05       	cpc	r23, r1
 a66:	08 95       	ret
 a68:	9b 01       	movw	r18, r22
 a6a:	ac 01       	movw	r20, r24
 a6c:	0a 2e       	mov	r0, r26
 a6e:	06 94       	lsr	r0
 a70:	57 95       	ror	r21
 a72:	47 95       	ror	r20
 a74:	37 95       	ror	r19
 a76:	27 95       	ror	r18
 a78:	ba 95       	dec	r27
 a7a:	c9 f7       	brne	.-14     	; 0xa6e <__ultoa_invert+0xa2>
 a7c:	62 0f       	add	r22, r18
 a7e:	73 1f       	adc	r23, r19
 a80:	84 1f       	adc	r24, r20
 a82:	95 1f       	adc	r25, r21
 a84:	a0 1d       	adc	r26, r0
 a86:	08 95       	ret

00000a88 <__prologue_saves__>:
 a88:	2f 92       	push	r2
 a8a:	3f 92       	push	r3
 a8c:	4f 92       	push	r4
 a8e:	5f 92       	push	r5
 a90:	6f 92       	push	r6
 a92:	7f 92       	push	r7
 a94:	8f 92       	push	r8
 a96:	9f 92       	push	r9
 a98:	af 92       	push	r10
 a9a:	bf 92       	push	r11
 a9c:	cf 92       	push	r12
 a9e:	df 92       	push	r13
 aa0:	ef 92       	push	r14
 aa2:	ff 92       	push	r15
 aa4:	0f 93       	push	r16
 aa6:	1f 93       	push	r17
 aa8:	cf 93       	push	r28
 aaa:	df 93       	push	r29
 aac:	cd b7       	in	r28, 0x3d	; 61
 aae:	de b7       	in	r29, 0x3e	; 62
 ab0:	ca 1b       	sub	r28, r26
 ab2:	db 0b       	sbc	r29, r27
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	f8 94       	cli
 ab8:	de bf       	out	0x3e, r29	; 62
 aba:	0f be       	out	0x3f, r0	; 63
 abc:	cd bf       	out	0x3d, r28	; 61
 abe:	09 94       	ijmp

00000ac0 <__epilogue_restores__>:
 ac0:	2a 88       	ldd	r2, Y+18	; 0x12
 ac2:	39 88       	ldd	r3, Y+17	; 0x11
 ac4:	48 88       	ldd	r4, Y+16	; 0x10
 ac6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ac8:	6e 84       	ldd	r6, Y+14	; 0x0e
 aca:	7d 84       	ldd	r7, Y+13	; 0x0d
 acc:	8c 84       	ldd	r8, Y+12	; 0x0c
 ace:	9b 84       	ldd	r9, Y+11	; 0x0b
 ad0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ad2:	b9 84       	ldd	r11, Y+9	; 0x09
 ad4:	c8 84       	ldd	r12, Y+8	; 0x08
 ad6:	df 80       	ldd	r13, Y+7	; 0x07
 ad8:	ee 80       	ldd	r14, Y+6	; 0x06
 ada:	fd 80       	ldd	r15, Y+5	; 0x05
 adc:	0c 81       	ldd	r16, Y+4	; 0x04
 ade:	1b 81       	ldd	r17, Y+3	; 0x03
 ae0:	aa 81       	ldd	r26, Y+2	; 0x02
 ae2:	b9 81       	ldd	r27, Y+1	; 0x01
 ae4:	ce 0f       	add	r28, r30
 ae6:	d1 1d       	adc	r29, r1
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	ed 01       	movw	r28, r26
 af4:	08 95       	ret

00000af6 <_exit>:
 af6:	f8 94       	cli

00000af8 <__stop_program>:
 af8:	ff cf       	rjmp	.-2      	; 0xaf8 <__stop_program>
